<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>饺子</title>
  
  <subtitle>优于别人，并不高贵，真正的高贵应该是优于过去的自己</subtitle>
  <link href="http://chenzhijun.me/rss.xml" rel="self"/>
  
  <link href="http://chenzhijun.me/"/>
  <updated>2021-12-19T15:05:42.642Z</updated>
  <id>http://chenzhijun.me/</id>
  
  <author>
    <name>陈志军</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ETCD 主机恢复</title>
    <link href="http://chenzhijun.me/2021/12/19/etcd-recover/"/>
    <id>http://chenzhijun.me/2021/12/19/etcd-recover/</id>
    <published>2021-12-19T15:01:09.000Z</published>
    <updated>2021-12-19T15:05:42.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ETCD-主机恢复"><a href="#ETCD-主机恢复" class="headerlink" title="ETCD 主机恢复"></a>ETCD 主机恢复</h1><p>背景：在没有master 备份的情况下， 集群中有一个master 节点被直接重装系统；该节点非 ETCD master 节点。所以集群还是处于可用状态。但是 master 由之前的三节点变为 2 节点；</p><span id="more"></span> <p>openshift  版本：v170</p><ol><li>ETCD 备份 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#etcd master 节点上操作</span></span><br><span class="line">yum install -y etcd</span><br><span class="line">systemctl <span class="built_in">disable</span> etcd.service</span><br><span class="line">systemctl mask etcd.service</span><br><span class="line"><span class="built_in">export</span> ETCDCTL_API=3</span><br><span class="line">mkdir -p /backup/etcd-config-$(date +%Y%m%d)/</span><br><span class="line">cp -R /etc/etcd/ /backup/etcd-config-$(date +%Y%m%d)/</span><br><span class="line"></span><br><span class="line">oc get nodes -o wide|grep master |awk <span class="string">&#x27;&#123;print $6&quot;:2379&quot;&#125;&#x27;</span>|xargs|tr <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">ETCD_ENDPOINTS=$(oc get nodes -o wide|grep master |awk <span class="string">&#x27;&#123;print $6&quot;:2379&quot;&#125;&#x27;</span>|xargs|tr <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">etcdctl --cert /etc/etcd/peer.crt --key /etc/etcd/peer.key --cacert /etc/etcd/ca.crt --endpoints=<span class="variable">$ETCD_ENDPOINTS</span> snapshot save /var/lib/etcd/snapshot.db</span><br><span class="line"></span><br><span class="line"><span class="comment">#要先删掉无效 node,不然redeploy 证书的时候，会卡在 remove console 的步骤</span></span><br><span class="line"><span class="comment">#oc delete nodes [UNKONWN_NODE]</span></span><br><span class="line">oc get nodes|grep master|grep NotReady|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|xargs -i oc delete nodes &#123;&#125;</span><br><span class="line"></span><br><span class="line">cnsz92vl12816.cmftdc.cn</span><br></pre></td></tr></table></figure></li><li>重新部署 ETCD-CA</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> TOKEN=eyJhbGciOiJIUzUxMiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.5DWDErsUzcBYK-KD_j5tjemwPIrLMU3Xle5lDaoj-3HkYBeMQ2WTvF7wvkIj4Kint_XABxT7MgInCp9Z-gklyw</span><br><span class="line"></span><br><span class="line"><span class="comment">#0.恢复 ETCD 的 CA， 然后 certificate， 然后 master ca， master certificate；</span></span><br><span class="line"><span class="comment">#进入容器，增加 redeploy-etcd-ca.yml</span></span><br><span class="line"><span class="comment">#重新部署 ca</span></span><br><span class="line">cp add_new_nodes.yml redeploy-etcd-ca.yml</span><br><span class="line">---</span><br><span class="line">- import_playbook: openshift-etcd/redeploy-ca.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出容器，执行部署 ca，这里还没有增加主机</span></span><br><span class="line">curl -k -i -H <span class="string">&quot;Content-Type: application/json&quot;</span> -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> --data <span class="string">&#x27;&#123;&#125;&#x27;</span> https://localhost:5001/api/v1/playbooks/redeploy-etcd-ca.yml -X POST</span><br><span class="line"></span><br><span class="line">UUID=xxxx</span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/<span class="built_in">jobs</span>/<span class="variable">$UUID</span>/stdout -X GET</span><br></pre></td></tr></table></figure><ol start="3"><li>重新部署 ETCD 证书</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制 etcd 证书更新 playbook</span></span><br><span class="line">cp add_new_nodes.yml redeploy-etcd-certificates.yml</span><br><span class="line">---</span><br><span class="line">- import_playbook: openshift-etcd/redeploy-certificates.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新部署 etcd 证书</span></span><br><span class="line">curl -k -i -H <span class="string">&quot;Content-Type: application/json&quot;</span> -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> --data <span class="string">&#x27;&#123;&#125;&#x27;</span> https://localhost:5001/api/v1/playbooks/redeploy-etcd-certificates.yml -X POST</span><br><span class="line"></span><br><span class="line">cp add_new_nodes.yml redeploy-master-ca.yml</span><br><span class="line">---</span><br><span class="line">- import_playbook: openshift-master/redeploy-openshift-ca.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新部署 master 证书, 不执行，master 有</span></span><br><span class="line"><span class="comment">#curl -k -i -H &quot;Content-Type: application/json&quot; -H &quot;Authorization: $TOKEN&quot; --data &#x27;&#123;&#125;&#x27; https://localhost:5001/api/v1/playbooks/redeploy-master-ca.yml -X POST</span></span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line">curl -k -i -H <span class="string">&quot;Content-Type: application/json&quot;</span> -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> --data <span class="string">&#x27;&#123;&#125;&#x27;</span> https://localhost:5001/api/v1/playbooks/redeploy-certificates.yml -X POST</span><br><span class="line"></span><br><span class="line">UUID=xxxx</span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/<span class="built_in">jobs</span>/<span class="variable">$UUID</span>/stdout -X GET</span><br></pre></td></tr></table></figure><ol start="4"><li>增加 master 主机</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重新部署一遍 master 证书，不然后面的Wait for /apis/metrics.k8s.io/v1beta1 when registered 会出现异常,最好重新部署一遍证书</span></span><br><span class="line">ansible-playbook -i ./inventory project/openshift-master/redeploy-openshift-ca.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">##增加主机</span></span><br><span class="line"><span class="built_in">export</span> ETCD_NODES=cnsz92vl12816.cmftdc.cn</span><br><span class="line"></span><br><span class="line"><span class="comment">###1. 增加 hosts 配置</span></span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/groups/new_nodes -X POST</span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/groups/new_masters -X POST</span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/hosts/<span class="variable">$ETCD_NODES</span>/groups/new_nodes -X POST </span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/hosts/<span class="variable">$ETCD_NODES</span>/groups/new_masters -X POST </span><br><span class="line">curl -k -i -H <span class="string">&quot;Content-Type: application/json&quot;</span> -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> --data <span class="string">&#x27;&#123;&quot;openshift_node_group_name&quot;: &quot;node-config-master&quot;&#125;&#x27;</span> https://localhost:5001/api/v1/hostvars/<span class="variable">$ETCD_NODES</span>/groups/new_nodes?<span class="built_in">type</span>=inventory -X POST</span><br><span class="line">curl -k -i -H <span class="string">&quot;Content-Type: application/json&quot;</span> -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> --data <span class="string">&#x27;&#123;&quot;openshift_node_group_name&quot;: &quot;node-config-master&quot;&#125;&#x27;</span> https://localhost:5001/api/v1/hostvars/<span class="variable">$ETCD_NODES</span>/groups/new_masters?<span class="built_in">type</span>=inventory -X POST</span><br></pre></td></tr></table></figure><ol start="5"><li>恢复 master pod 组件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###恢复 master</span></span><br><span class="line">进入到 ansible-runner-service 容器中，</span><br><span class="line"><span class="built_in">cd</span> /root/ansible-runner-service/cmg-ocp/project</span><br><span class="line">cp add_new_nodes.yml add_new_masters.yml</span><br><span class="line"><span class="comment">#修改里面的内容为 openshfit-master</span></span><br><span class="line">---</span><br><span class="line">- import_playbook: openshift-master/scaleup.yml</span><br><span class="line"></span><br><span class="line">curl -k -i -H <span class="string">&quot;Content-Type: application/json&quot;</span> -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> --data <span class="string">&#x27;&#123;&#125;&#x27;</span> https://localhost:5001/api/v1/playbooks/add_new_masters.yml -X POST</span><br><span class="line"></span><br><span class="line">UUID=xxxx</span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/<span class="built_in">jobs</span>/<span class="variable">$UUID</span>/stdout -X GET</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">export</span> ETCD_NODES=cnsz92vl12816.cmftdc.cn</span><br><span class="line"></span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/groups/new_etcd -X POST</span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/hosts/<span class="variable">$ETCD_NODES</span>/groups/new_etcd -X POST</span><br><span class="line"></span><br><span class="line">curl -k -i -H <span class="string">&quot;Content-Type: application/json&quot;</span> -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> --data <span class="string">&#x27;&#123;&quot;openshift_node_group_name&quot;: &quot;node-config-master&quot;&#125;&#x27;</span> https://localhost:5001/api/v1/hostvars/<span class="variable">$ETCD_NODES</span>/groups/new_etcd?<span class="built_in">type</span>=inventory -X POST</span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复 etcd</span></span><br><span class="line"><span class="comment">#需要将 hosts 文件里面的 new_master,new_nodes 改到正确的位置</span></span><br><span class="line">vi /etc/ansible-runner/inventory/hosts</span><br><span class="line"></span><br><span class="line">OSEv3:</span><br><span class="line">  children:</span><br><span class="line">    etcd:</span><br><span class="line">      hosts:</span><br><span class="line">        cnsz92vl10440.cmftdc.cn: null</span><br><span class="line">        cnsz92vl10441.cmftdc.cn: null</span><br><span class="line">    masters:</span><br><span class="line">      hosts:</span><br><span class="line">        cnsz92vl10442.cmftdc.cn: null</span><br><span class="line">        cnsz92vl10440.cmftdc.cn: null</span><br><span class="line">        cnsz92vl10441.cmftdc.cn: null</span><br><span class="line">    new_etcd:</span><br><span class="line">      hosts:</span><br><span class="line">        cnsz92vl10442.cmftdc.cn: null</span><br><span class="line">    nodes:</span><br><span class="line">      hosts:</span><br><span class="line">        cnsz92vl10442.cmftdc.cn:</span><br><span class="line">          openshift_node_group_name: node-config-master</span><br><span class="line">        cnsz92vl10440.cmftdc.cn:</span><br><span class="line">          openshift_node_group_name: node-config-master</span><br><span class="line">        cnsz92vl10441.cmftdc.cn:</span><br><span class="line">          openshift_node_group_name: node-config-master</span><br><span class="line">        cnsz92vl10443.cmftdc.cn:</span><br><span class="line">          openshift_node_group_name: node-config-infra</span><br><span class="line">        cnsz92vl10445.cmftdc.cn:</span><br><span class="line">          openshift_node_group_name: node-config-infra</span><br><span class="line">        cnsz92vl10448.cmftdc.cn:</span><br><span class="line">          openshift_node_group_name: node-config-compute</span><br><span class="line">        cnsz92vl11127.cmftdc.cn:</span><br><span class="line">          openshift_node_group_name: node-config-infra</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li><p>检查 hosts 文件，确保之前的 new_masters 配置已删除</p></li><li><p>确认 ETCD 中失败节点删除</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">100.69.137.3:2379,100.69.137.4:2379,100.69.137.5:2379</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除集群中原来的老 etcd 节点</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> ETCDCTL_API=3</span><br><span class="line"><span class="comment">#查询etcd member list</span></span><br><span class="line">etcdctl --cert /etc/etcd/peer.crt --key /etc/etcd/peer.key --cacert /etc/etcd/ca.crt --endpoints=<span class="string">&quot;100.69.137.3:2379,100.69.137.4:2379,100.69.137.5:2379&quot;</span> member list</span><br><span class="line"><span class="comment">#查询集群状态详情</span></span><br><span class="line">etcdctl --cert /etc/etcd/peer.crt --key /etc/etcd/peer.key --cacert /etc/etcd/ca.crt --endpoints=<span class="string">&quot;100.69.137.3:2379, has been 100.69.137.4:2379,100.69.137.5:2379&quot;</span> --write-out=table endpoint status</span><br><span class="line"><span class="comment">#删除失败节点</span></span><br><span class="line">etcdctl --cert /etc/etcd/peer.crt --key /etc/etcd/peer.key --cacert /etc/etcd/ca.crt --endpoints=<span class="string">&quot;100.69.137.3:2379,100.69.137.4:2379,100.69.137.5:2379&quot;</span> member remove ID</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令执行 example</span></span><br><span class="line">etcdctl --cert /etc/etcd/peer.crt --key /etc/etcd/peer.key --cacert /etc/etcd/ca.crt --endpoints=<span class="string">&quot;100.69.137.3:2379,100.69.137.4:2379,100.69.137.5:2379&quot;</span> --write-out=table endpoint status</span><br><span class="line">Failed to get the status of endpoint 100.75.46.77:2379 (context deadline exceeded)</span><br><span class="line">+-------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|     ENDPOINT      |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |</span><br><span class="line">+-------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">| 100.75.46.76:2379 | 29ace8a008187a61 |  3.2.22 |   26 MB |     <span class="literal">false</span> |        15 |      74501 |</span><br><span class="line">| 100.75.46.78:2379 | 189fb2b310767596 |  3.2.22 |   26 MB |      <span class="literal">true</span> |        15 |      74516 |</span><br><span class="line">+-------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">[root@cnsz92vl10441 ~]<span class="comment"># etcdctl --cert /etc/etcd/peer.crt --key /etc/etcd/peer.key --cacert /etc/etcd/ca.crt --endpoints=&quot;100.75.46.76:2379,100.75.46.77:2379,100.75.46.78:2379&quot; member list</span></span><br><span class="line">189fb2b310767596, started, cnsz92vl10441, https://100.75.46.78:2380, https://100.75.46.78:2379</span><br><span class="line">29ace8a008187a61, started, cnsz92vl10440, https://100.75.46.76:2380, https://100.75.46.76:2379</span><br><span class="line">b25d6fd89ab25bb3, started, cnsz92vl10442, https://100.75.46.77:2380, https://100.75.46.77:2379</span><br><span class="line">[root@cnsz92vl10441 ~]<span class="comment"># etcdctl --cert /etc/etcd/peer.crt --key /etc/etcd/peer.key --cacert /etc/etcd/ca.crt --endpoints=&quot;100.75.46.76:2379,100.75.46.77:2379,100.75.46.78:2379&quot; member remove b25d6fd89ab25bb3</span></span><br><span class="line">Member b25d6fd89ab25bb3 removed from cluster 4547a2deaf4fef8e</span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b67bcee1-ec5d-4ed1-bd39-181a74cde946/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b67bcee1-ec5d-4ed1-bd39-181a74cde946/Untitled.png"></p><ol start="8"><li>恢复 ETCD</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增加 new_etcd 分组 . 只要有 new_etcd 这个组，不要 new_masters, new_nodes</span></span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/groups/new_etcd -X POST</span><br><span class="line"></span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/hosts/<span class="variable">$ETCD_NODES</span>/groups/new_etcd -X POST </span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/ansible-runner-service/cmg-ocp/project</span><br><span class="line">cp add_new_nodes.yml add_new_etcd.yml</span><br><span class="line"><span class="comment">#修改里面的内容为 openshfit-master</span></span><br><span class="line">---</span><br><span class="line">- import_playbook: openshift-etcd/scaleup.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除原来集群中失败的 etcd 节点;会拉取新的 etcd 镜像，保持镜像仓库镜像只有一个版本；</span></span><br><span class="line">curl -k -i -H <span class="string">&quot;Content-Type: application/json&quot;</span> -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> --data <span class="string">&#x27;&#123;&#125;&#x27;</span> https://localhost:5001/api/v1/playbooks/add_new_etcd.yml -X POST</span><br><span class="line">UUID=xxxx</span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/<span class="built_in">jobs</span>/<span class="variable">$UUID</span>/stdout -X GET</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="9"><li>验证</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">etcdctl --cert /etc/etcd/peer.crt --key /etc/etcd/peer.key --cacert /etc/etcd/ca.crt --endpoints=<span class="string">&quot;100.75.46.76:2379,100.75.46.77:2379,100.75.46.78:2379&quot;</span> --write-out=table endpoint status</span><br><span class="line"></span><br><span class="line">oc get pods -n kube-system</span><br></pre></td></tr></table></figure><p>附录：</p><ol><li>bootstrap 常用参数命令 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TOKEN 导入</span></span><br><span class="line"><span class="built_in">export</span> TOKEN=eyJhbGciOiJIUzUxMiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.5DWDErsUzcBYK-KD_j5tjemwPIrLMU3Xle5lDaoj-3HkYBeMQ2WTvF7wvkIj4Kint_XABxT7MgInCp9Z-gklyw</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署集群</span></span><br><span class="line">curl -k -i -H <span class="string">&quot;Content-Type: application/json&quot;</span> -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> --data <span class="string">&#x27;&#123;&#125;&#x27;</span> https://localhost:5001/api/v1/playbooks/deploy_cluster.yml -X POST</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载集群</span></span><br><span class="line">curl -k -i -H <span class="string">&quot;Content-Type: application/json&quot;</span> -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> --data <span class="string">&#x27;&#123;&#125;&#x27;</span> https://localhost:5001/api/v1/playbooks/uninstall.yml -X POST</span><br><span class="line"></span><br><span class="line"><span class="comment">##删除命令</span></span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/groups/new_etcd -X DELETE</span><br><span class="line"></span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/groups/new_masters -X DELETE</span><br><span class="line"></span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/groups/new_nodes -X DELETE</span><br><span class="line"></span><br><span class="line"><span class="comment">#实时日志</span></span><br><span class="line">curl -k -i -H <span class="string">&quot;Authorization: <span class="variable">$TOKEN</span>&quot;</span> https://localhost:5001/api/v1/<span class="built_in">jobs</span>/<span class="variable">$UUID</span>/stdout -X GET</span><br></pre></td></tr></table></figure></li><li>卡在某个 ansible 脚本 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fatal: [cnsz92vl10442.cmftdc.cn -&gt; cnsz92vl10441.cmftdc.cn]: FAILED! =&gt; &#123;<span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;cmd&quot;</span>: [<span class="string">&quot;oc&quot;</span>, <span class="string">&quot;adm&quot;</span>, <span class="string">&quot;create-api-client-config&quot;</span>, <span class="string">&quot;--certificate-authority=/etc/origin/master/ca.crt&quot;</span>, <span class="string">&quot;--client-dir=/tmp/openshift-ansible-O3mFaX&quot;</span>, <span class="string">&quot;--groups=system:masters,system:openshift-master&quot;</span>, <span class="string">&quot;--master=https://cnsz92vl10441:8443&quot;</span>, <span class="string">&quot;--public-master=https://cnsz92vl10441:8443&quot;</span>, <span class="string">&quot;--signer-cert=/etc/origin/master/ca.crt&quot;</span>, <span class="string">&quot;--signer-key=/etc/origin/master/ca.key&quot;</span>, <span class="string">&quot;--signer-serial=/etc/origin/master/ca.serial.txt&quot;</span>, <span class="string">&quot;--user=system:openshift-master&quot;</span>, <span class="string">&quot;--basename=openshift-master&quot;</span>, <span class="string">&quot;--expire-days=730&quot;</span>], <span class="string">&quot;delta&quot;</span>: <span class="string">&quot;0:00:00.193549&quot;</span>, <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2021-01-11 15:59:54.383491&quot;</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;non-zero return code&quot;</span>, <span class="string">&quot;rc&quot;</span>: 1, <span class="string">&quot;start&quot;</span>: <span class="string">&quot;2021-01-11 15:59:54.189942&quot;</span>, <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;error: --signer-serial, \&quot;/etc/origin/master/ca.serial.txt\&quot; must be a valid file&quot;</span>, <span class="string">&quot;stderr_lines&quot;</span>: [<span class="string">&quot;error: --signer-serial, \&quot;/etc/origin/master/ca.serial.txt\&quot; must be a valid file&quot;</span>], <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;stdout_lines&quot;</span>: []&#125;</span><br><span class="line"></span><br><span class="line">看下是否 node 没有从集群中删除</span><br></pre></td></tr></table></figure></li><li>错误 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TASK [openshift_ca : Install the base package <span class="keyword">for</span> admin tooling] ***************</span><br><span class="line">FAILED - RETRYING: Install the base package <span class="keyword">for</span> admin tooling (3 retries left).</span><br><span class="line">FAILED - RETRYING: Install the base package <span class="keyword">for</span> admin tooling (2 retries left).</span><br><span class="line">FAILED - RETRYING: Install the base package <span class="keyword">for</span> admin tooling (1 retries left).</span><br><span class="line">fatal: [cnsz92vl10442.cmftdc.cn -&gt; cnsz92vl10441.cmftdc.cn]: FAILED! =&gt; &#123;<span class="string">&quot;attempts&quot;</span>: 3, <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;No package matching &#x27;atomic-openshift-3.11.170&#x27; found available, installed or updated&quot;</span>, <span class="string">&quot;rc&quot;</span>: 126, <span class="string">&quot;results&quot;</span>: [<span class="string">&quot;No package matching &#x27;atomic-openshift-3.11.170&#x27; found available, installed or updated&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">ansible masters -i hosts -m shell -a <span class="string">&quot;yum clean all&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有可能少包，那就需要手动装</span></span><br><span class="line">scp atomic-openshift-3.11.170-1.git.0.00cac56.el7.x86_64.rpm cnsz92vl10441:/tmp/</span><br><span class="line"></span><br><span class="line">rpm -Uvh atomic-openshift-3.11.170-1.git.0.00cac56.el7.x86_64.rpm</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i ./inventory ./project/openshift-master/redeploy-openshift-ca.yml</span><br><span class="line"></span><br><span class="line">ansible-playbook -i ./inventory ./project/redeploy-certificates.yml</span><br><span class="line"></span><br><span class="line">ansible-playbook -i ./inventory ./project/openshift-master/redeploy-certificates.yml</span><br><span class="line"></span><br><span class="line">osm_etcd_image=harbor.uat.cmft.com/rhel7/etcd:3.2.22</span><br><span class="line">openshift_pkg_version=-3.11.170</span><br><span class="line"></span><br><span class="line">openshift_is_atomic=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ETCD-主机恢复&quot;&gt;&lt;a href=&quot;#ETCD-主机恢复&quot; class=&quot;headerlink&quot; title=&quot;ETCD 主机恢复&quot;&gt;&lt;/a&gt;ETCD 主机恢复&lt;/h1&gt;&lt;p&gt;背景：在没有master 备份的情况下， 集群中有一个master 节点被直接重装系统；该节点非 ETCD master 节点。所以集群还是处于可用状态。但是 master 由之前的三节点变为 2 节点；&lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://chenzhijun.me/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="http://chenzhijun.me/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot&amp;SpringCloud 组件容器化方案</title>
    <link href="http://chenzhijun.me/2021/09/19/kubernetes-springboot-cloud/"/>
    <id>http://chenzhijun.me/2021/09/19/kubernetes-springboot-cloud/</id>
    <published>2021-09-19T13:02:42.000Z</published>
    <updated>2021-12-19T15:05:17.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-amp-SpringCloud-组件容器化方案"><a href="#SpringBoot-amp-SpringCloud-组件容器化方案" class="headerlink" title="SpringBoot&amp;SpringCloud 组件容器化方案"></a>SpringBoot&amp;SpringCloud 组件容器化方案</h1><p>该方案为 Java 开发人员在使用 springboot 开发以及是用 springcloud 组件时，将 组件/服务 进行容器化部署运行的方案。</p><span id="more"></span> <h2 id="0-前置约定"><a href="#0-前置约定" class="headerlink" title="0. 前置约定"></a>0. 前置约定</h2><pre><code>对 Java 开发时使用到的相关开发基础组件版本约定：</code></pre><ol><li>Java Version: 1.8+</li><li>SpringBoot Version: 2.3.5.RELEASE</li><li>SpringCloud Version: Hoxton.SR9 （请注意，springcloud 版本有 springboot 版本要求）</li><li>Openshift Version: 3.11，4.6</li><li>Kubernetes Version: 1.11（对应 ocp3），1.19（对应 ocp4）</li></ol><h1 id="1-SpringBoot-服务容器化"><a href="#1-SpringBoot-服务容器化" class="headerlink" title="1. SpringBoot 服务容器化"></a>1. SpringBoot 服务容器化</h1><pre><code>目前 Java 项目开发多基于 springboot ，开发完成后多以嵌入 web 服务器的方式构建成 jar 包方式运行服务。容器化过程中，我们需要将其进行容器化。下面将以一个用户服务`user-app`进行示例：</code></pre><ol><li><p>项目结构；</p><p> 其中 src 为我们的源代码目录；Dockerfile 文件可以存放到项目根路径下，也可以自定义，自定义目录时，请注意在构建时需要指定文件路径。</p><p> <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f6baf9b1-9002-41c1-b721-702ce15208ea/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f6baf9b1-9002-41c1-b721-702ce15208ea/Untitled.png"></p></li><li><p>业务镜像构建；</p><p> 通过在项目中增加 <code>Dockerfile</code> 文件可以将业务服务制作成一个业务镜像，<code>Dockerfile</code>模板内容为：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># registry-c.cmft.com 为金科提供的镜像仓库服务</span></span><br><span class="line"><span class="comment"># openjdk:11.0.10-jdk-oracle 为原生 Java 基础镜像，可按需求定制</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">registry-c.cmft.com/base/openjdk:11.0.10-jdk-oracle</span></span><br><span class="line"><span class="comment"># 业务镜像构建指令</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">target/*.jar</span> <span class="string">/home/</span></span><br><span class="line"><span class="comment"># 容器运行时的默认启动命令，实际运行中可覆盖</span></span><br><span class="line"><span class="comment"># user-app-0.0.1-SNAPSHOT.jar 请替换为实际maven、gradle 构建时的 jar 包名称</span></span><br><span class="line"><span class="string">CMD</span> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/home/user-app-0.0.1-SNAPSHOT.jar&quot;</span>]</span><br></pre></td></tr></table></figure><p> 请注意：在构建镜像前需要先生成 jar 包，之后再使用 <code>docker build -t [YOUR_IMAGE_NAME] .</code> 来生成业务镜像。</p></li><li><p>业务部署</p><p> 在通过步骤 2 生成业务基础镜像后，接下来需要将其进行业务部署。业务部署的deployment 模板内容：<code>user-app.yaml</code></p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">user-app</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">user-app</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">springcloud</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">user-app</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">user-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;-jar&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/home/user-app-0.0.1-SNAPSHOT.jar</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;--spring.config.additional-location=file:./config/&#x27;</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROFILE_ACTIVE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">prod</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">&#x27;registry-c.cmft.com/czj/user-app:latest&#x27;</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">user-app</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/home/config</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">volume-config</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">defaultMode:</span> <span class="number">420</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">userapp-config</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">volume-config</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">application-dev.yml:</span> <span class="string">|-</span></span><br><span class="line">    <span class="attr">spring:</span></span><br><span class="line">      <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">config:</span> <span class="string">uat-config</span></span><br><span class="line">    <span class="attr">eureka:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">serviceUrl:</span></span><br><span class="line">          <span class="attr">defaultZone:</span> <span class="string">http://eureka-1:8761/eureka/,http://eureka-2:8762/eureka/,http://eureka-3:8763/eureka/</span></span><br><span class="line">      <span class="attr">instance:</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application-prod.yml:</span> <span class="string">|-</span></span><br><span class="line">    <span class="attr">spring:</span></span><br><span class="line">      <span class="attr">profiles:</span> <span class="string">prod</span></span><br><span class="line">    <span class="attr">config:</span> <span class="string">uat-config</span></span><br><span class="line">    <span class="attr">eureka:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">serviceUrl:</span></span><br><span class="line">          <span class="attr">defaultZone:</span> <span class="string">http://eureka-1:8761/eureka/,http://eureka-2:8762/eureka/,http://eureka-3:8763/eureka/</span></span><br><span class="line">      <span class="attr">instance:</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application-uat.yml:</span> <span class="string">|-</span></span><br><span class="line">    <span class="attr">spring:</span></span><br><span class="line">      <span class="attr">profiles:</span> <span class="string">uat</span></span><br><span class="line">    <span class="attr">config:</span> <span class="string">uat-config</span></span><br><span class="line">    <span class="attr">eureka:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">serviceUrl:</span></span><br><span class="line">          <span class="attr">defaultZone:</span> <span class="string">http://eureka-1:8761/eureka/,http://eureka-2:8762/eureka/,http://eureka-3:8763/eureka/</span></span><br><span class="line">      <span class="attr">instance:</span></span><br><span class="line">        <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">userapp-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">springcloud</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">user-app</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">user-app</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">springcloud</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-app</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">user-app</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p> 通过 <code>configmap</code> 来控制相关的配置时，我们需要制定以下 config 的位置。实际运行中的文件目录结构如下：</p><p> <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/328e4f73-992b-49a3-8e50-6a7c368f8438/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/328e4f73-992b-49a3-8e50-6a7c368f8438/Untitled.png"></p></li><li><p> 检查部署结构</p></li></ol><pre><code>单体的 springboot 服务结合 kubernetes 的 configmap 其实际效果不是特别大，因为明文的 configmap 可以直接在 springboot 项目中多放置配置文件使用。但在实际中，我们也可以使用 kubernetes 的 secret 来进行配置的简单加密，部署方式也是类似，只是将 configmap 改为 secret 即可。完整示例代码可以参考：[http://git.dev.cmrh.com/springcloud/user-app.git](http://git.dev.cmrh.com/springcloud/user-app.git)</code></pre><h2 id="2-SpringCloud-组件的容器化"><a href="#2-SpringCloud-组件的容器化" class="headerlink" title="2. SpringCloud 组件的容器化"></a>2. SpringCloud 组件的容器化</h2><pre><code>SpringCloud 全家桶中有非常多的组件，有些组件需要结合客户端使用，有些是属于独立中间件，现挑选其中常见组件进行容器化示例。示例组件包含：注册中心 Eureka，网关 Zuul，熔断监控 Hystrix、Turbine，微服务管理 SpringCloud Admin，客户端负载均衡器 Robbin。 请注意，示例中 SpringCloud 版本为：Hoxton.SR9；对应的 Springboot 版本为：2.3.5.RELEASE。</code></pre><h3 id="2-1-Eureka-服务容器化"><a href="#2-1-Eureka-服务容器化" class="headerlink" title="2.1 Eureka 服务容器化"></a>2.1 Eureka 服务容器化</h3><ol><li>Eureka 高可用架构；<pre><code> Eureka 原生高可用方案为部署三个 Eureka 节点，节点直接互相注册来达成高可用；在容器化过程中，我们通过部署独立的三个 Eureka 实例：eureka-1，eureka-2，eureka-3；三实例互相注册来达成高可用。</code></pre></li><li>Eureka 高可用部署；<pre><code> Eureka 作为通用的组件，可以使用通用的部署方式：</code></pre> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">eureka-1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">springcloud</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">eureka-1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">eureka-1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROFILE_ACTIVE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">eureka-1</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">&#x27;registry-c.cmft.com/czj/eureka-server:latest&#x27;</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">eureka-1</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-2</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">eureka-2</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">springcloud</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">eureka-2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">eureka-2</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROFILE_ACTIVE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">eureka-2</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">&#x27;registry-c.cmft.com/czj/eureka-server:latest&#x27;</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">eureka-2</span></span><br><span class="line">          <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">          <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">          <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-3</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">eureka-3</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">springcloud</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">eureka-3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">eureka-3</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROFILE_ACTIVE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">eureka-3</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">&#x27;registry-c.cmft.com/czj/eureka-server:latest&#x27;</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">eureka-1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">springcloud</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8761</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-1</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> &#123;&#125;</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-2</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">eureka-2</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">springcloud</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8762</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8762</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-2</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> &#123;&#125;</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-3</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">eureka-3</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">springcloud</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8763</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8763</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-3</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li>Eureka 访问验证<pre><code> 在 ocp 平台通过创建 route 来将 Eureka 服务暴露给业务使用。具体创建方式参考《OpenShift 基础服务操作指南-金科》[http://confluence.cmrh.com/pages/viewpage.action?pageId=81213827](http://confluence.cmrh.com/pages/viewpage.action?pageId=81213827)</code></pre></li><li>项目使用 Eureka <pre><code> 在与 Eureka 同 Namespace 下的服务中，在springboot 项目中增加如下配置：</code></pre> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka-1:8761/eureka/,http://eureka-2:8762/eureka/,http://eureka-3:8763/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">user-app</span> <span class="comment">#需要改动</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">cmft-user-app</span> <span class="comment">#与 project 保持一致</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">user-app</span> <span class="comment">#跟metadata.name保持一致</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">user-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">user-app</span> <span class="comment">#修改为项目名就行</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry-c.cmft.com/czj/user-app:latest</span> <span class="comment">#修改为实际的 image-name</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROFILE_ACTIVE</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">prod</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http_proxy</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">proxy_url</span></span><br><span class="line">          <span class="attr">ports:</span> <span class="comment">#修改为实际的监听端口</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span> </span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-xmx&quot;</span>,<span class="string">&quot;-xms&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/home/user-app-0.0.1-SNAPSHOT.jar&quot;</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SpringBoot-amp-SpringCloud-组件容器化方案&quot;&gt;&lt;a href=&quot;#SpringBoot-amp-SpringCloud-组件容器化方案&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot&amp;amp;SpringCloud 组件容器化方案&quot;&gt;&lt;/a&gt;SpringBoot&amp;amp;SpringCloud 组件容器化方案&lt;/h1&gt;&lt;p&gt;该方案为 Java 开发人员在使用 springboot 开发以及是用 springcloud 组件时，将 组件/服务 进行容器化部署运行的方案。&lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://chenzhijun.me/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="http://chenzhijun.me/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>OpenShift 专用 Router 实操</title>
    <link href="http://chenzhijun.me/2021/02/27/openshift-router/"/>
    <id>http://chenzhijun.me/2021/02/27/openshift-router/</id>
    <published>2021-02-27T14:53:35.000Z</published>
    <updated>2021-12-19T15:05:20.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openshift-专用-Router-实操"><a href="#Openshift-专用-Router-实操" class="headerlink" title="Openshift 专用 Router 实操"></a>Openshift 专用 Router 实操</h1><p>由于某些服务在实际业务场景中非常重要，或者为了与其它业务进行入口区分，因此会产生专属 router（Ingress）的需求，在 openshift 的实际操作可以这样：</p><span id="more"></span> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">确保 sa 为 router 名字的有scc hostnetwork 权限</span></span><br><span class="line">oc adm policy add-scc-to-user hostnetwork -z router</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建一个 router ，指定 router-iot 为名字</span></span><br><span class="line">oc adm router router-iot --images=&#x27;harbor.uat.cmft.com/openshift3/ose-haproxy-router:v3.11.170&#x27; --selector=&#x27;node-role.kubernetes.io/iot-router=true&#x27; --labels=&#x27;router=iot&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置 router 的 ns 标签</span></span><br><span class="line">oc set env dc/router-iot NAMESPACE_LABELS=&quot;router=iot”</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置 ns 标签</span></span><br><span class="line">oc label namespace demo “router=iot”</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置某个 ns 下的 router 必须有 cluster-reader 权限</span></span><br><span class="line">oc adm policy add-cluster-role-to-user cluster-reader system:serviceaccount:demo:router</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">https://docs.openshift.com/container-platform/3.11/admin_guide/manage_rbac.html</span></span><br><span class="line">oc adm policy add-role-to-user cluster-reader system:serviceaccount:demo:router</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改 router 监听端口</span></span><br><span class="line">oc adm router --replicas=0 --ports=&#x27;10080:10080,10443:10443&#x27; </span><br><span class="line">oc set env dc/router ROUTER_SERVICE_HTTP_PORT=10080 ROUTER_SERVICE_HTTPS_PORT=10443</span><br><span class="line">oc scale dc/router --replicas=1</span><br><span class="line"></span><br><span class="line">iptables -A OS_FIREWALL_ALLOW -p tcp --dport 10080 -j ACCEPT</span><br><span class="line">iptables -A OS_FIREWALL_ALLOW -p tcp --dport 10443 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">暴露一个 route</span></span><br><span class="line">oc expose service myservice --hostname=owner.example.test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">允许泛域名</span></span><br><span class="line">oc set env dc/router ROUTER_ALLOW_WILDCARD_ROUTES=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改泛域名子域</span></span><br><span class="line">oc adm router --force-subdomain=&#x27;$&#123;name&#125;-$&#123;namespace&#125;.apps.example.com&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Openshift-专用-Router-实操&quot;&gt;&lt;a href=&quot;#Openshift-专用-Router-实操&quot; class=&quot;headerlink&quot; title=&quot;Openshift 专用 Router 实操&quot;&gt;&lt;/a&gt;Openshift 专用 Router 实操&lt;/h1&gt;&lt;p&gt;由于某些服务在实际业务场景中非常重要，或者为了与其它业务进行入口区分，因此会产生专属 router（Ingress）的需求，在 openshift 的实际操作可以这样：&lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://chenzhijun.me/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="http://chenzhijun.me/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Openshift 专属机方案</title>
    <link href="http://chenzhijun.me/2021/02/17/openshift-server-exclusive/"/>
    <id>http://chenzhijun.me/2021/02/17/openshift-server-exclusive/</id>
    <published>2021-02-17T12:59:00.000Z</published>
    <updated>2021-12-19T15:05:27.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openshift-专属机方案"><a href="#Openshift-专属机方案" class="headerlink" title="Openshift 专属机方案"></a>Openshift 专属机方案</h1><span id="more"></span> <h2 id="专属机方案-Kubernetes-一）"><a href="#专属机方案-Kubernetes-一）" class="headerlink" title="专属机方案-Kubernetes(一）"></a>专属机方案-Kubernetes(一）</h2><ol><li>给所有主机新增 role:  [<code>node-role.kubernetes.io/&#123;xxxxx&#125;:](http://node-role.kubernetes.io/%7Bxxxxx%7D:) &quot;true&quot;</code>;这样在 oc get nodes 的时候就会多出一个 <code>xxxxx</code> 的角色；</li><li>给相关的主机打上污点：<code>oc adm nodes $i com.cmft.exclusive=xxxxx:NoSchedule</code> / <code>kubectl taint node com.cmft.exclusive=xxxxx:NoSchedule</code></li><li>让所有的业务 pod 增加主机调度和容忍，<code>nodeSelector</code>,<code>tolerations</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: harbor.uat.cmft.com/base/nginx:latest</span><br><span class="line">    name: nginx</span><br><span class="line">    resources: &#123;&#125;</span><br><span class="line">  nodeSelector: </span><br><span class="line">    node-role.kubernetes.io/compute: <span class="string">&quot;true&quot;</span></span><br><span class="line">    node-role.kubernetes.io/xxxxx: <span class="string">&quot;true&quot;</span></span><br><span class="line">  tolerations: </span><br><span class="line">  - key: <span class="string">&quot;com.cmft.exclusive&quot;</span></span><br><span class="line">    operator: <span class="string">&quot;Equal&quot;</span></span><br><span class="line">    value: <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">    effect: <span class="string">&quot;NoSchedule&quot;</span></span><br></pre></td></tr></table></figure><h2 id="专属机方案-Openshift（二）"><a href="#专属机方案-Openshift（二）" class="headerlink" title="专属机方案-Openshift（二）"></a>专属机方案-Openshift（二）</h2><ol><li> 选定主机并且将主机的 label 进行修改，将 label 名改为 [<code>node-role.kubernetes.io](node-role.kubernetes.io/shimo)/xxx=true</code>，这样在 <code>oc get nodes</code> 时可以看到 <code>xxx</code> 的角色的主机；</li><li> project（namespace）在创建的时候可以使用<code>oc adm new-project demo --node-selector=&#39;node-role.kubernetes.io/xxx=true&#39;</code> 这样默认 project 会只调度到selector 的主机上。</li><li>如果是已存在的项目：<code>oc patch namespace demo -p &#39;&#123;&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&quot;openshift.io/node-selector&quot;:&quot;node-role.kubernetes.io/xxx=true&quot;&#125;&#125;&#125;&#39;</code> 可以进行 patch 操作；如果有多个 label 可以进行：<code>oc patch namespace demo -p &#39;&#123;&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&quot;openshift.io/node-selector&quot;:&quot;node-role.kubernetes.io/xxx1=true,node-role.kubernetes.io/xxx2=true&quot;&#125;&#125;&#125;&#39;</code></li><li>如果需要设置全局默认调度可以修改 master 配置文件：<code>/etc/origin/master/master-config.yaml</code>  <code>projectConfig.defaultNodeSelector</code> 然后重启 api 和 controller：<code>master-restart api</code>&amp;&amp;<code>master-restart api</code></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Openshift-专属机方案&quot;&gt;&lt;a href=&quot;#Openshift-专属机方案&quot; class=&quot;headerlink&quot; title=&quot;Openshift 专属机方案&quot;&gt;&lt;/a&gt;Openshift 专属机方案&lt;/h1&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://chenzhijun.me/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="http://chenzhijun.me/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 基础 一（简介与核心组件介绍）</title>
    <link href="http://chenzhijun.me/2021/01/17/kubernetes-basic-1-base-concepts/"/>
    <id>http://chenzhijun.me/2021/01/17/kubernetes-basic-1-base-concepts/</id>
    <published>2021-01-17T14:51:32.000Z</published>
    <updated>2021-12-19T15:05:18.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubernetes-基础-一（简介与核心组件介绍）"><a href="#kubernetes-基础-一（简介与核心组件介绍）" class="headerlink" title="kubernetes 基础 一（简介与核心组件介绍）"></a>kubernetes 基础 一（简介与核心组件介绍）</h1><h2 id="Kubernetes-是什么？"><a href="#Kubernetes-是什么？" class="headerlink" title="Kubernetes 是什么？"></a>Kubernetes 是什么？</h2><p>Kubernetes 是一个用于编排容器化服务的的开源平台。我们通常会将 Kubernetes 简称为 K8s。Kubernetes 通常也被大家当做容器编排引擎，可以这样说，目前市面上很多的 PaaS 平台基本都是使用 k8s 作为其底层支持。</p><span id="more"></span> <h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><p>如果了解到 kubernetes 是什么，那么 kubernetes 为什么我们要使用了？它提供了我们什么能力而让其这么火？</p><h3 id="应用编排与服务发现"><a href="#应用编排与服务发现" class="headerlink" title="应用编排与服务发现"></a>应用编排与服务发现</h3><p>kubernetes 能够帮助我们管理我们的业务应用系统，并且在内部可以基于dns 和 ip 来进行通信访问，对外可以提供 service 和 loadbalance 两种方式提供服务访问。</p><h3 id="储存管理"><a href="#储存管理" class="headerlink" title="储存管理"></a>储存管理</h3><p>kubernetes 提供多种方式来进行数据的持久化管理，比如本地卷，ceph，第三方公有云的存储等</p><h3 id="自动发布与回滚"><a href="#自动发布与回滚" class="headerlink" title="自动发布与回滚"></a>自动发布与回滚</h3><p>kubernetes 可以工具你配置的应用的desired 来以可控的方式控制应用的发布与回滚</p><h3 id="应用自愈"><a href="#应用自愈" class="headerlink" title="应用自愈"></a>应用自愈</h3><p>kubernetes 可以在服务状态不对时，进行服务自愈。比如健康检查</p><h3 id="秘钥与配置管理"><a href="#秘钥与配置管理" class="headerlink" title="秘钥与配置管理"></a>秘钥与配置管理</h3><p>可以在应用无需重启就能更新服务的 secret 和配置 config。这个功能其实可以做比如动态更新配置，多环境配置等。</p><h2 id="核心控制平面组件"><a href="#核心控制平面组件" class="headerlink" title="核心控制平面组件"></a>核心控制平面组件</h2><p><img src="/images/qiniu/2020-06-07-17-19-38.png" alt="2020-06-07-17-19-38"></p><p>kubernetes 集群中机器分为两个类型，控制节点和工作节点；kubernetes 组件又分为控制面组件和节点组件。比如控制平面组件为：kube-apserver,kube-scheduler,kube-controller-manager，ETCD；这些控制平面的组件只会运行在 master 节点上。而节点组件：kubelet，kube-proxy 则会运行在集群所有节点上（包括 master 和 worker）。接下来我么来了解下每个组件的功能是做什么的。</p><h3 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h3><p>kube-apiserver 是控制平面的组件。主要用来暴露 kubernetes 的 api。kube-apiserver 设计成可水平扩展的应用，用一个 loadbalance 就可以对其所有 apiserver 的实例进行负载。</p><h3 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h3><p>主要用来监听所有没有调度主机的新创建的 pod，并且将 pod 调度到主机上。scheduler 调度规则包含了很多因素：独立和集群需要的资源，硬件、软件、策略约束，亲和性和非亲和性，数据约束，业务干扰，调度时间等</p><h3 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h3><p>kubernetes 的主要控制器，通过 apiserver 来监控整个集群的状态，并且确保集群处于预期的工作状态。它由一系列独立的 controller 组成。为了减少复杂性，他们封装进了一个二进制文件中，并且运行一个进程。</p><p>这些 controller 包括：Node controller，Replication controller，Endpoints controller，Service Account &amp; Token controllers等等。</p><h3 id="ETCD"><a href="#ETCD" class="headerlink" title="ETCD"></a>ETCD</h3><p>etcd 本身是一个高可用的键值数据库，kubernetes 用其来进行集群的数据存储。</p><h2 id="核心节点组件"><a href="#核心节点组件" class="headerlink" title="核心节点组件"></a>核心节点组件</h2><h3 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h3><p>在集群中的每个主机上都会运行的一个 agent，确保容器在 pod 中运行。kubelet 通过PodSpec来管理容器，并且确保他们运行正常。注意：如果是主机原来的容器，kubelet 并不会进行管理。</p><h3 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h3><p>kube-proxy 是每个主机上都会有的一个网络代理，是 service 的主要实现方式。kube-proxy 包含主机上的网络规则，这些规则在集群中定了集群内部的访问和外部的网络会话访问方式。</p><h2 id="集群插件"><a href="#集群插件" class="headerlink" title="集群插件"></a>集群插件</h2><p>集群插件都是属于集群级别的组件，以deployment，daemonset等方式运行在 kube-system 的命名空间下，用来实现集群级别的一些功能。</p><h3 id="DNS-插件"><a href="#DNS-插件" class="headerlink" title="DNS 插件"></a>DNS 插件</h3><p>DNS 是集群中的必须安装的插件，在集群中很多功能都会依赖 dns 。kubernetes 创建的容器会自动包含这个 dns 服务器在容器的 dns 搜索域中。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;kubernetes-基础-一（简介与核心组件介绍）&quot;&gt;&lt;a href=&quot;#kubernetes-基础-一（简介与核心组件介绍）&quot; class=&quot;headerlink&quot; title=&quot;kubernetes 基础 一（简介与核心组件介绍）&quot;&gt;&lt;/a&gt;kubernetes 基础 一（简介与核心组件介绍）&lt;/h1&gt;&lt;h2 id=&quot;Kubernetes-是什么？&quot;&gt;&lt;a href=&quot;#Kubernetes-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 是什么？&quot;&gt;&lt;/a&gt;Kubernetes 是什么？&lt;/h2&gt;&lt;p&gt;Kubernetes 是一个用于编排容器化服务的的开源平台。我们通常会将 Kubernetes 简称为 K8s。Kubernetes 通常也被大家当做容器编排引擎，可以这样说，目前市面上很多的 PaaS 平台基本都是使用 k8s 作为其底层支持。&lt;/p&gt;</summary>
    
    
    
    <category term="Kubernetes" scheme="http://chenzhijun.me/categories/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="http://chenzhijun.me/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>nginx-and-haproxy-config</title>
    <link href="http://chenzhijun.me/2020/10/06/nginx-and-haproxy-config/"/>
    <id>http://chenzhijun.me/2020/10/06/nginx-and-haproxy-config/</id>
    <published>2020-10-06T14:24:08.000Z</published>
    <updated>2020-10-06T14:57:47.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-和-Haproxy-配置文件"><a href="#Nginx-和-Haproxy-配置文件" class="headerlink" title="Nginx 和 Haproxy 配置文件"></a>Nginx 和 Haproxy 配置文件</h1><p>目标：通过 Nginx 和 Haproxy 的常用配置实现服务的反向代理。</p><span id="more"></span><h2 id="NGINX-配置"><a href="#NGINX-配置" class="headerlink" title="NGINX 配置"></a>NGINX 配置</h2><p>nginx 常用的配置文件一般处于 <code>/etc/nginx/conf/nginx.conf</code>。只有改这个文件之后执行 <code>nginx -s reload</code> 才可以动态加载，如果是 include 下面的，不会生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#daemon off;</span><br><span class="line">user root root;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_cpu_affinity auto;</span><br><span class="line">error_log &#x2F;var&#x2F;log&#x2F;ingress-gateway&#x2F;error.log;</span><br><span class="line">events &#123;</span><br><span class="line">  use epoll;</span><br><span class="line">  worker_connections 20000;</span><br><span class="line">  multi_accept on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#TCP 方式</span><br><span class="line">stream &#123;</span><br><span class="line">  upstream env1-lb-tcp &#123;</span><br><span class="line">    server 10.244.13.227:19080 weight&#x3D;1 max_fails&#x3D;1 fail_timeout&#x3D;10s</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 19080;</span><br><span class="line">    proxy_pass env1-lb-tcp;</span><br><span class="line">    proxy_connect_timeout 2s;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># HTTP 方式</span><br><span class="line">http &#123;</span><br><span class="line">  server_tokens off;</span><br><span class="line">  sendfile on;</span><br><span class="line">  tcp_nodelay on;</span><br><span class="line">  tcp_nopush on;</span><br><span class="line">  port_in_redirect off;</span><br><span class="line">  keepalive_timeout 0;</span><br><span class="line">  underscores_in_headers on;</span><br><span class="line">  charset utf-8;</span><br><span class="line"></span><br><span class="line">  include mime.types;</span><br><span class="line">  lua_use_default_type off;</span><br><span class="line"></span><br><span class="line">  log_format main &#39;[$time_local]&#96;$http_x_up_calling_line_id&#96;&quot;$request&quot;&#96;&quot;$http_user_agent&quot;&#96;$staTus&#96;[$remote_addr]&#96;$http_x_log_uid&#96;&quot;$http_referer&quot;&#96;$request_time&#96;$body_bytes_sent&#96;$http_x_forwarded_proto&#96;$http_x_forwarded_for&#96;$host&#96;$http_cookie&#96;$upstream_response_time&#96;xd&#39;;</span><br><span class="line">  client_header_buffer_size 4k;</span><br><span class="line">  large_client_header_buffers 8 16k;</span><br><span class="line">  server_names_hash_bucket_size 128;</span><br><span class="line">  client_max_body_size 0m;</span><br><span class="line"></span><br><span class="line">  client_header_timeout 30s;</span><br><span class="line">  client_body_timeout 180s;</span><br><span class="line">  send_timeout 180s;</span><br><span class="line">  lingering_close off;</span><br><span class="line"></span><br><span class="line">  upstream smp-env-http-di1.19089.gts-seata-metrics.up &#123;</span><br><span class="line">    server 10.244.13.227:19089 weight&#x3D;1 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen 19089;</span><br><span class="line">    server_name smp-env-http-di1;</span><br><span class="line"></span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;ingress-gateway&#x2F;vhost_access.log main;</span><br><span class="line">    error_log &#x2F;var&#x2F;log&#x2F;ingress-gateway&#x2F;vhost_error.log;</span><br><span class="line">    # for support ssl        # for support data zip        # for support backend server.</span><br><span class="line">    # 后端default_backend的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">    #proxy_redirect                  off;</span><br><span class="line">    #proxy_next_upstream             error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line">    proxy_headers_hash_bucket_size 6400;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">      root html;</span><br><span class="line">    &#125;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line"></span><br><span class="line">      proxy_ignore_client_abort on;</span><br><span class="line">      proxy_pass http:&#x2F;&#x2F;smp-env-http-di1.19089.gts-seata-metrics.up&#x2F;;</span><br><span class="line">      proxy_connect_timeout 2s;</span><br><span class="line">      proxy_set_header Host $http_host;</span><br><span class="line">      proxy_http_version 1.1;</span><br><span class="line">      proxy_set_header Connection &quot;&quot;;</span><br><span class="line">      proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">      proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">      proxy_buffer_size 128k;</span><br><span class="line">      proxy_buffers 4 256k;</span><br><span class="line">      proxy_busy_buffers_size 256k;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Haproxy-配置"><a href="#Haproxy-配置" class="headerlink" title="Haproxy 配置"></a>Haproxy 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">  daemon</span><br><span class="line">  log  127.0.0.1 local0 info</span><br><span class="line">  tune.ssl.default-dh-param 2048</span><br><span class="line">  maxconn  20000</span><br><span class="line">  pidfile  &#x2F;app&#x2F;haproxy&#x2F;run&#x2F;haproxy.pid</span><br><span class="line">  stats  socket &#x2F;app&#x2F;haproxy&#x2F;lib&#x2F;haproxy&#x2F;stats</span><br><span class="line">  tune.bufsize  131072</span><br><span class="line">  user nginx</span><br><span class="line">  group nginx</span><br><span class="line">  tune.ssl.default-dh-param 2048</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  log  global</span><br><span class="line">  maxconn  10000</span><br><span class="line">  mode  http</span><br><span class="line">  option  dontlog-normal</span><br><span class="line">  option  http-server-close</span><br><span class="line">  retries  3</span><br><span class="line">  stats  enable</span><br><span class="line">  timeout  http-request 10s</span><br><span class="line">  timeout  queue 1m</span><br><span class="line">  timeout  connect 10s</span><br><span class="line">  timeout  client 1m</span><br><span class="line">  timeout  server 30m</span><br><span class="line">  timeout  check 10s</span><br><span class="line"></span><br><span class="line">listen Stats</span><br><span class="line">  bind 0.0.0.0:10000</span><br><span class="line">  mode http</span><br><span class="line">  stats enable</span><br><span class="line">  stats uri &#x2F;</span><br><span class="line">  stats refresh 5s</span><br><span class="line">  stats show-node</span><br><span class="line">  stats show-legends</span><br><span class="line">  stats hide-version</span><br><span class="line"></span><br><span class="line">frontend https_frontend</span><br><span class="line">  #bind *:80</span><br><span class="line">  mode http</span><br><span class="line">  bind *:443 ssl crt  &#x2F;app&#x2F;haproxy&#x2F;cert&#x2F;chenzhijun.me.pem</span><br><span class="line">  acl secure dst_port eq 443</span><br><span class="line">  http-request add-header X-Forwarded-Proto https if &#123; ssl_fc &#125;</span><br><span class="line">  #redirect scheme https if !&#123; ssl_fc &#125;</span><br><span class="line">  rspadd Strict-Transport-Security:\ max-age&#x3D;31536000;\ includeSubDomains;\ preload</span><br><span class="line">  rsprep ^Set-Cookie:\ (.*) Set-Cookie:\ \1;\ Secure if secure</span><br><span class="line">  option httpclose</span><br><span class="line">  default_backend web_server</span><br><span class="line"></span><br><span class="line">backend web_server</span><br><span class="line">  mode http</span><br><span class="line">  balance roundrobin</span><br><span class="line">  http-request add-header X-Forwarded-Proto https if &#123; ssl_fc &#125;</span><br><span class="line">  cookie SERVERID insert indirect nocache</span><br><span class="line">  server lb1 10.0.0.1:80 check port 80 inter 10s fastinter 2s downinter 3s rise 3 fall 3</span><br><span class="line">  server lb2 10.0.0.2:80 check port 80 inter 10s fastinter 2s downinter 3s rise 3 fall 3</span><br><span class="line"></span><br><span class="line">listen harbor-ceph</span><br><span class="line">  bind 0.0.0.0:80</span><br><span class="line">  mode tcp</span><br><span class="line">  maxconn 4086</span><br><span class="line">  server s1 oss.chenzhijun.me:80</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Nginx-和-Haproxy-配置文件&quot;&gt;&lt;a href=&quot;#Nginx-和-Haproxy-配置文件&quot; class=&quot;headerlink&quot; title=&quot;Nginx 和 Haproxy 配置文件&quot;&gt;&lt;/a&gt;Nginx 和 Haproxy 配置文件&lt;/h1&gt;&lt;p&gt;目标：通过 Nginx 和 Haproxy 的常用配置实现服务的反向代理。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>HTTPS 到底是什么？CA 证书又是指什么？</title>
    <link href="http://chenzhijun.me/2020/06/16/what-is-the-truely-about-https/"/>
    <id>http://chenzhijun.me/2020/06/16/what-is-the-truely-about-https/</id>
    <published>2020-06-16T14:27:31.000Z</published>
    <updated>2020-06-21T08:42:33.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTPS-到底是什么？CA-证书又是指什么？"><a href="#HTTPS-到底是什么？CA-证书又是指什么？" class="headerlink" title="HTTPS 到底是什么？CA 证书又是指什么？"></a>HTTPS 到底是什么？CA 证书又是指什么？</h1><p>https 相信很多人已经不陌生了，那么 https 到底是怎么一回事？我们通常说用 https 就要证书，那么证书和 CA 又是什么关系了？</p><!-- 这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题？--><h2 id="HTTPS-出现的背景"><a href="#HTTPS-出现的背景" class="headerlink" title="HTTPS 出现的背景"></a>HTTPS 出现的背景</h2><p>我们通常习惯于使用 http 进行数据通信，可以说如果这个世界是个和谐的世界，那么应该就没 http 的事了。不过林子大了，什么鸟都会有。我们在使用 http 的时候镜像面对的一个问题就是安全性。http 的报文传送都是已明文的方式传送，那么问题来了?我怎么知道这个到底是不是原始数据？如果有个中间人截获了然后篡改消息怎么办？基于这个问题，Netscape（开发 Firefox 的公司）搞了一个 SSL 协议。后来 SSL 发展到 v3 版本时，被标准化，这个时候就改名了，叫 TLS。于是乎，在 http 上 加了 SSL/TLS 就变成了我们都知道的 HTTPS。</p><!-- 这个技术的优势和劣势分别是什么，或者说，这个技术的 trade-off （要什么不要什么）是什么 --><h2 id="HTTPS-优势和劣势是什么？"><a href="#HTTPS-优势和劣势是什么？" class="headerlink" title="HTTPS 优势和劣势是什么？"></a>HTTPS 优势和劣势是什么？</h2><p>HTTPS 出现了之后，安全协议在 OSI 的分层中属于在 HTTP 之下，传输层之上。</p><p>HTTPS 带来的的优势有下面几点：</p><ol><li>数据加密与安全保护；</li><li>认证用户和服务器，可以确保数据正确发送到 客户机和服务器;</li><li>SEO 倾斜；</li></ol><p>HTTPS 的劣势也比较明显：</p><ol><li>HTTPS协议握手阶段比较费时，会使页面的加载时间延长 </li><li>加解密会在服务端增加 CPU 的消耗 </li><li>证书费用 </li><li>相对意义上的安全（拥有 CA 根证书，也是可以攻击的）</li></ol><h2 id="这个技术适用的场景"><a href="#这个技术适用的场景" class="headerlink" title="这个技术适用的场景"></a>这个技术适用的场景</h2><p>https 适用于所有的网站。但是如果在一些不需要特别注意安全性，又需要快速访问的话，比如博客网站，静态资源这些，我们可以直接使用 http 而不用 https。在下面的一些场景中，最好还是使用 https:</p><ol><li>企业应用 </li><li>政务信息 </li><li>支付应用 </li><li>API接口</li></ol><h2 id="这个技术的组成部分和关键点（核心思想，核心组件）"><a href="#这个技术的组成部分和关键点（核心思想，核心组件）" class="headerlink" title="这个技术的组成部分和关键点（核心思想，核心组件）"></a>这个技术的组成部分和关键点（核心思想，核心组件）</h2><p>https 的关键在于对信息的加密。在传统的 http 的过程我们 AB 两点间的通信是这样的。</p><p><img src="/images/qiniu/2020-06-16-23-11-08.png" alt="2020-06-16-23-11-08"></p><p>A 直接发送数据给 B。好了。这个时候有个 C 出来了搞事情了：</p><p><img src="/images/qiniu/2020-06-16-23-16-06.png" alt="2020-06-16-23-16-06"></p><p>看原来好好的一个打招呼，变成了一个莫名其妙~~</p><p>那 AB 之间假设要防止 C 的截获并且篡改消息，怎么办？生活中也有这种场景，比如谍战片里面，卧底和接头人约定一个密码串，然后 A 用密码串加密，B 用密码串解密。</p><p><img src="/images/qiniu/2020-06-16-23-24-38.png" alt="2020-06-16-23-24-38"></p><p>这样只要 AB 都有一个密码本，那就可以加解密了。这也就是我们常说的“对称加密”。但是假如你们之间的这个密码本被 C 获取了呢?  C 获取了你们的密码本，它也不告诉 AB，那就跟我们上图一样了。它先解密 A 的数据，然后再篡改数据加密后再发给 B。你看这就危险了吧。</p><p>那这个时候我们又要想办法了。B 说这样不安全，这样吧，我用两个密码本，一个公开给你（公钥），一个我自己单独留着（私钥）。你发过来的消息用我的公钥加下密码，我用我的私钥解下密。A 说好，拿着 B 的公钥加密数据后发给了 B。这样一看，嗯，很不错，A 发给 B 的消息再也不会泄漏了。因为就算 C 获取了消息，它没有私钥也没法解密消息啊。A 也这样想，也是，但是你回给我的消息还是可能被截取到，那我这个 A 也搞个公钥和私钥，你发给我的消息，用我的公钥加密下。这样一看，很不错啊。A B 之间发送的消息再也不用担心被第三方知道了，因为 C 无法界面消息啊！</p><p><img src="/images/qiniu/2020-06-16-23-45-49.png" alt="2020-06-16-23-45-49"></p><p>如果 C 是个好人，那就到此了。可是如果 C 不甘心了？C 想，既然 A 的实际数据我不知道，那我就假装 B 来跟 A 套取数据。比如下面，毕竟 A 是无法判断到底谁是 B 的。如果想不明白，想想谍战片，你说你是好人，你就是好人吗？怎么证明？：</p><p><img src="/images/qiniu/2020-06-16-23-50-39.png" alt="2020-06-16-23-50-39"></p><p>那好吧。大家一看，不行啊。这的搞个中间人来确认 A 是 A，B 是 B，就像确认你是你妈的儿子一样！！那怎么搞了？你想想，你想要知道你们市的公安局合不合法，那肯定是省公安局说了算。你想要知道省公安局合不合法，那肯定是是国家公安局说了算。所以你只要信任国家公安局，那就可以信任国家公安局认可的下一级公安局，那就可以认可它下面的工具认可的下面的公安局… 中间人也一样，不过我们在通信中引入了一个专用术语 CA(Certificate Authority)证书认证机构。</p><h2 id="这个技术的底层原理和关键实现"><a href="#这个技术的底层原理和关键实现" class="headerlink" title="这个技术的底层原理和关键实现"></a>这个技术的底层原理和关键实现</h2><h2 id="已有的实现和它之间的对比"><a href="#已有的实现和它之间的对比" class="headerlink" title="已有的实现和它之间的对比"></a>已有的实现和它之间的对比</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTTPS-到底是什么？CA-证书又是指什么？&quot;&gt;&lt;a href=&quot;#HTTPS-到底是什么？CA-证书又是指什么？&quot; class=&quot;headerlink&quot; title=&quot;HTTPS 到底是什么？CA 证书又是指什么？&quot;&gt;&lt;/a&gt;HTTPS 到底是什么？CA 证书</summary>
      
    
    
    
    <category term="HTTPS" scheme="http://chenzhijun.me/categories/HTTPS/"/>
    
    
    <category term="HTTPS" scheme="http://chenzhijun.me/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>自己用 Java 写一个阻塞队列(二)</title>
    <link href="http://chenzhijun.me/2020/06/03/write-a-blockqueue-hand-by-hand-2/"/>
    <id>http://chenzhijun.me/2020/06/03/write-a-blockqueue-hand-by-hand-2/</id>
    <published>2020-06-03T13:39:13.000Z</published>
    <updated>2020-06-03T14:12:02.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自己用-Java-写一个阻塞队列-二"><a href="#自己用-Java-写一个阻塞队列-二" class="headerlink" title="自己用 Java 写一个阻塞队列(二)"></a>自己用 Java 写一个阻塞队列(二)</h1><p>上一章 <a href="http://chenzhijun.me/2020/05/27/java-thread-lock-condition-blockqueue/">自己用 Java 写一个阻塞队列</a> 我们写了一个初始阻塞队列。过了几天再回头看。嗯，好像看出哪里不对劲了。尝试改了一下。</p><h2 id="原先队列实现的问题"><a href="#原先队列实现的问题" class="headerlink" title="原先队列实现的问题"></a>原先队列实现的问题</h2><p>我们说是队列，但是队列的特点是什么？先进先出！在上一个版本中，我们在出队列的时候用的是<code>size</code>值，也就是最后一个位置值。那么想想，我们这算队列么？这是栈啊。这是问题一。<br>另外我们知道 arraylist 其实其底层实现还是数组，那为啥我不直接用数组了？我基本上也不用 list 的功能啊。那这个地方就是第二个可以优化的地方了。<br>在第一个版本中为了运行正常，我把 size 的初始值定为 -1，我有点受不了，不行，这个地方我也要优化。<br>嗯，就优化这三个地方吧。</p><h2 id="优化问题-ArrayList"><a href="#优化问题-ArrayList" class="headerlink" title="优化问题 ArrayList"></a>优化问题 ArrayList</h2><p>其实际很简单，把 ArrayList 改为数组 Object[]。原先 add 和 get 的地方直接使用 Object[idx] 代替即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object[] objects = <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">objects[size] = t;</span><br><span class="line">t = objects.[size];</span><br></pre></td></tr></table></figure><h2 id="优化入队和出队"><a href="#优化入队和出队" class="headerlink" title="优化入队和出队"></a>优化入队和出队</h2><p>队列的本质应该是先进先出的数据结构。这里用两个 idx 来代替，一个是入队索引，一个是出队索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> enqIdx = <span class="number">0</span>;<span class="comment">//入队的索引号</span></span><br><span class="line"><span class="keyword">int</span> deqIdx = <span class="number">0</span>;<span class="comment">//出队的索引号</span></span><br></pre></td></tr></table></figure><p>这里有个问题，就是当索引到了我们的数组大小的时候，要把索引重新开始计数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((enqIdx+<span class="number">1</span>)==objects.length)&#123;</span><br><span class="line">    enqIdx=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((deqIdx+<span class="number">1</span>)==objects.length)&#123;</span><br><span class="line">    deqIdx=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开始代码"><a href="#开始代码" class="headerlink" title="开始代码"></a>开始代码</h2><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item15_Lock_Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BlockedQueue blockedQueue = <span class="keyword">new</span> BlockedQueue();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i++ &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="string">&quot;producer-&quot;</span> + i) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">&quot;,生产数字:&quot;</span> + blockedQueue.enq(<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>)));</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">1000</span> * <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j++ &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;consumer-&quot;</span> + j) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">&quot;,消费数字:&quot;</span> + blockedQueue.deq());</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">1000</span> * <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            thread1.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockedQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Object[] objects = <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;<span class="comment">//容量值，从 0 开始计算。</span></span><br><span class="line">    <span class="keyword">int</span> enqIdx = <span class="number">0</span>;<span class="comment">//入队的索引号</span></span><br><span class="line">    <span class="keyword">int</span> deqIdx = <span class="number">0</span>;<span class="comment">//出队的索引号</span></span><br><span class="line">    <span class="comment">//判断是否满了</span></span><br><span class="line">    Condition notFull = lock.newCondition();</span><br><span class="line">    <span class="comment">//判断是否空的</span></span><br><span class="line">    Condition notEmpty = lock.newCondition();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="function">Object <span class="title">enq</span><span class="params">(Object t)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//判断队列是否已满</span></span><br><span class="line">            <span class="keyword">while</span> (size == objects.length) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不好意思，满了！！！&quot;</span>);</span><br><span class="line">                notFull.await();</span><br><span class="line">            &#125;</span><br><span class="line">            objects[deqIdx] = t;</span><br><span class="line">            <span class="comment">//如果当前入队是最后一个位置，那我们下次就要从 0 开始计算</span></span><br><span class="line">            <span class="keyword">if</span> ((deqIdx + <span class="number">1</span>) == objects.length) &#123;</span><br><span class="line">                deqIdx = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            notEmpty.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="function">Object <span class="title">deq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        Object t = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不好意思，空了~~&quot;</span>);</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            &#125;</span><br><span class="line">            t = objects[deqIdx];</span><br><span class="line">            <span class="comment">//如果当前已经是最后的一个索引并且已经出队了，那我们下次就要从 0 开始计算</span></span><br><span class="line">            <span class="keyword">if</span> ((deqIdx + <span class="number">1</span>) == objects.length) &#123;</span><br><span class="line">                deqIdx = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            notFull.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，看起来有点样子了。不再像之前的感觉了。 毕竟这个版本是正经的队列的先进先出了。而且看不惯的从 -1 计数也改了。其实有时候多加几个指针索引也挺好的。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;自己用-Java-写一个阻塞队列-二&quot;&gt;&lt;a href=&quot;#自己用-Java-写一个阻塞队列-二&quot; class=&quot;headerlink&quot; title=&quot;自己用 Java 写一个阻塞队列(二)&quot;&gt;&lt;/a&gt;自己用 Java 写一个阻塞队列(二)&lt;/h1&gt;&lt;p&gt;上一章 &lt;a href=&quot;http://chenzhijun.me/2020/05/27/java-thread-lock-condition-blockqueue/&quot;&gt;自己用 Java 写一个阻塞队列&lt;/a&gt; 我们写了一个初始阻塞队列。过了几天再回头看。嗯，好像看出哪里不对劲了。尝试改了一下。&lt;/p&gt;
&lt;h2 id=&quot;原先队列实现的问题&quot;&gt;&lt;a href=&quot;#原先队列实现的问题&quot; class=&quot;headerlink&quot; title=&quot;原先队列实现的问题&quot;&gt;&lt;/a&gt;原先队列实现的问题&lt;/h2&gt;&lt;p&gt;我们说是队列，但是队列的特点是什么？先进先出！在上一个版本中，我们在出队列的时候用的是&lt;code&gt;size&lt;/code&gt;值，也就是最后一个位置值。那么想想，我们这算队列么？这是栈啊。这是问题一。&lt;br&gt;另外我们知道 arraylist 其实其底层实现还是数组，那为啥我不直接用数组了？我基本上也不用 list 的功能啊。那这个地方就是第二个可以优化的地方了。&lt;br&gt;在第一个版本中为了运行正常，我把 size 的初始值定为 -1，我有点受不了，不行，这个地方我也要优化。&lt;br&gt;嗯，就优化这三个地方吧。&lt;/p&gt;
&lt;h2 id=&quot;优化问题-ArrayList&quot;&gt;&lt;a href=&quot;#优化问题-ArrayList&quot; class=&quot;headerlink&quot; title=&quot;优化问题 ArrayList&quot;&gt;&lt;/a&gt;优化问题 ArrayList&lt;/h2&gt;&lt;p&gt;其实际很简单，把 ArrayList 改为数组 Object[]。原先 add 和 get 的地方直接使用 Object[idx] 代替即可。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Object[] objects = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Object[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objects[size] = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = objects.[size];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;优化入队和出队&quot;&gt;&lt;a href=&quot;#优化入队和出队&quot; class=&quot;headerlink&quot; title=&quot;优化入队和出队&quot;&gt;&lt;/a&gt;优化入队和出队&lt;/h2&gt;&lt;p&gt;队列的本质应该是先进先出的数据结构。这里用两个 idx 来代替，一个是入队索引，一个是出队索引。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; enqIdx = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//入队的索引号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; deqIdx = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//出队的索引号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有个问题，就是当索引到了我们的数组大小的时候，要把索引重新开始计数。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((enqIdx+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)==objects.length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enqIdx=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((deqIdx+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)==objects.length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    deqIdx=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;开始代码&quot;&gt;&lt;a href=&quot;#开始代码&quot; class=&quot;headerlink&quot; title=&quot;开始代码&quot;&gt;&lt;/a&gt;开始代码&lt;/h2&gt;</summary>
    
    
    
    <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
    <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>自己用 Java 写一个阻塞队列</title>
    <link href="http://chenzhijun.me/2020/05/27/write-a-blockqueue-hand-by-hand/"/>
    <id>http://chenzhijun.me/2020/05/27/write-a-blockqueue-hand-by-hand/</id>
    <published>2020-05-27T15:39:13.000Z</published>
    <updated>2020-06-03T14:12:24.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自己用-Java-写一个阻塞队列"><a href="#自己用-Java-写一个阻塞队列" class="headerlink" title="自己用 Java 写一个阻塞队列"></a>自己用 Java 写一个阻塞队列</h1><p>Java 内置了很多数据结构，阻塞队列也有。最近在看 Java 中的并发包：<code>Lock</code>&amp;<code>Condition</code>。然后看到了有人说可以用他们实现阻塞队列，然后我想着，那我是不是也可以写一个阻塞队列？</p><h2 id="阻塞队列的特点"><a href="#阻塞队列的特点" class="headerlink" title="阻塞队列的特点"></a>阻塞队列的特点</h2><p>想着就想着先写一个，阻塞队列的特点：</p><ol><li>一个有限的存数据的队列；</li><li>入队的时候要判断队列是否已满；已满的时候，入队的线程要阻塞等待，直到队列有空位，被唤醒继续入队；</li><li>出队的时候要判断队列是否为空；为空的时候，获取队列数据的线程阻塞等待，直到队列有新数据的时候被唤醒继续执行；</li></ol><span id="more"></span><p>也就是说我们在对队列操作的时候有两个操作，一个入队，一个出队：</p><!-- ![](https://user-gold-cdn.xitu.io/2020/5/27/17256ca4352722e6?w=1108&h=1130&f=png&s=108675) --><p><img src="/images/qiniu/2020-05-27-23-39-24.png" alt="2020-05-27-23-39-24"></p><p>入队线程：<code>enq thread</code>; 出队线程 <code>deq thread</code>。两者在进行入队和出队的时候都会要先获取全局 lock。默认我们使用的是 size 来存储 list 的容量，入队的时候：size+1；出队的时候 size-1；然后我们用了两个 <code>condition</code> 来告诉当前入队线程和出队线程当前是应该等待，还是可以继续执行。当队列容量不够的时候，入队线程进入 <code>await</code>，否则就入队，并且唤醒出队的线程。出队的线程进入之后先判断队列是否为空，为空的时候就<code>await</code>，然后等地啊被唤醒。大致流程就是这样：</p><p>然后就写了下面的比较初级的代码。</p><p>v1 版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockedQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//判断是否满了</span></span><br><span class="line">    Condition full = lock.newCondition();</span><br><span class="line">    <span class="comment">//判断是否空的</span></span><br><span class="line">    Condition empty = lock.newCondition();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="function">T <span class="title">enq</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//判断队列是否已满</span></span><br><span class="line">            <span class="keyword">while</span> (size &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不好意思，满了！！！&quot;</span>);</span><br><span class="line">                full.await();</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(size, t);</span><br><span class="line">            size++;</span><br><span class="line">            empty.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="function">T <span class="title">deq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        T t = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不好意思，空了~~&quot;</span>);</span><br><span class="line">                empty.await();</span><br><span class="line">            &#125;</span><br><span class="line">            t = list.get(size);</span><br><span class="line">            size--;</span><br><span class="line">            full.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写了个<code>main</code>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockQueueDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BlockedQueue&lt;Integer&gt; blockedQueue = <span class="keyword">new</span> BlockedQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i++ &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="string">&quot;producer-&quot;</span> + i) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">&quot;,生产数字:&quot;</span> + blockedQueue.enq(<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>)));</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">1000</span> * <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j++ &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;consumer-&quot;</span> + j) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">&quot;,消费数字:&quot;</span> + blockedQueue.deq());</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">1000</span> * <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            thread1.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">            <span class="comment">//System.out.println(blockedQueue.size);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就会发现一个报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;consumer-4&quot; java.lang.IndexOutOfBoundsException: Index: 10, Size: 10</span><br><span class="line">at java.util.ArrayList.rangeCheck(ArrayList.java:657)</span><br><span class="line">at java.util.ArrayList.get(ArrayList.java:433)</span><br><span class="line">at me.chenzhijun.gk_multithread.BlockedQueue.deq(Item15_Lock_Condition.java:105)</span><br><span class="line">at me.chenzhijun.gk_multithread.Item15_Lock_Condition$2.run(Item15_Lock_Condition.java:46)</span><br><span class="line">java.lang.IndexOutOfBoundsException: Index: 10, Size: 10</span><br><span class="line">at java.util.ArrayList.rangeCheck(ArrayList.java:657)</span><br><span class="line">at java.util.ArrayList.get(ArrayList.java:433)</span><br><span class="line">at me.chenzhijun.gk_multithread.BlockedQueue.deq(Item15_Lock_Condition.java:105)</span><br><span class="line">at me.chenzhijun.gk_multithread.Item15_Lock_Condition$2.run(Item15_Lock_Condition.java:46)</span><br><span class="line">Exception in thread &quot;consumer-6&quot; java.lang.IndexOutOfBoundsException: Index: 10, Size: 10</span><br><span class="line">at java.util.ArrayList.rangeCheck(ArrayList.java:657)</span><br><span class="line">at java.util.ArrayList.get(ArrayList.java:433)</span><br><span class="line">at me.chenzhijun.gk_multithread.BlockedQueue.deq(Item15_Lock_Condition.java:105)</span><br><span class="line">at me.chenzhijun.gk_multithread.Item15_Lock_Condition$2.run(Item15_Lock_Condition.java:46)</span><br></pre></td></tr></table></figure><p>当时看到这个报错，真的是一脸懵逼，我代码看起来好像没有错误啊。那是哪里的原因，顺着代码一行行读，主要是发现数组越界：10。是不是因为我们<code>size++</code>比如第 10 个 Thread 将 size 加到了 10，但是我们的 arrayList 最大也就为 9。那好像是会出现是问题哦，代码越界判断的习惯真的要注意。然后改了下代码v2版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockedQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//改为了 -1 然后在入队的时候先加1</span></span><br><span class="line">    <span class="keyword">int</span> size = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//判断是否满了</span></span><br><span class="line">    Condition full = lock.newCondition();</span><br><span class="line">    <span class="comment">//判断是否空的</span></span><br><span class="line">    Condition empty = lock.newCondition();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="function">T <span class="title">enq</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//判断队列是否已满</span></span><br><span class="line">            <span class="keyword">while</span> (size &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不好意思，满了！！！&quot;</span>);</span><br><span class="line">                full.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//先加一，再往队列加数据。</span></span><br><span class="line">            size++;</span><br><span class="line">            list.add(size, t);</span><br><span class="line">            empty.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="function">T <span class="title">deq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        T t = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不好意思，空了~~&quot;</span>);</span><br><span class="line">                empty.await();</span><br><span class="line">            &#125;</span><br><span class="line">            t = list.get(size);</span><br><span class="line">            size--;</span><br><span class="line">            full.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再运行 <code>main</code> 方法就发现正常了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">producer-1,生产数字:8</span><br><span class="line">producer-14,生产数字:7</span><br><span class="line">producer-14,生产数字:6</span><br><span class="line">consumer-7,消费数字:6</span><br><span class="line">consumer-7,消费数字:7</span><br><span class="line">producer-16,生产数字:1</span><br><span class="line">producer-25,生产数字:6</span><br><span class="line">consumer-24,消费数字:6</span><br><span class="line">producer-11,生产数字:5</span><br><span class="line">producer-7,生产数字:6</span><br><span class="line">consumer-17,消费数字:6</span><br><span class="line">consumer-17,消费数字:5</span><br><span class="line">consumer-16,消费数字:1</span><br><span class="line">consumer-21,消费数字:8</span><br><span class="line">不好意思，空了~~</span><br><span class="line">不好意思，空了~~</span><br></pre></td></tr></table></figure><p>这样改了之后看起来好像是可以了。但总觉得哪里不对，可又说不出哪里的问题。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;自己用-Java-写一个阻塞队列&quot;&gt;&lt;a href=&quot;#自己用-Java-写一个阻塞队列&quot; class=&quot;headerlink&quot; title=&quot;自己用 Java 写一个阻塞队列&quot;&gt;&lt;/a&gt;自己用 Java 写一个阻塞队列&lt;/h1&gt;&lt;p&gt;Java 内置了很多数据结构，阻塞队列也有。最近在看 Java 中的并发包：&lt;code&gt;Lock&lt;/code&gt;&amp;amp;&lt;code&gt;Condition&lt;/code&gt;。然后看到了有人说可以用他们实现阻塞队列，然后我想着，那我是不是也可以写一个阻塞队列？&lt;/p&gt;
&lt;h2 id=&quot;阻塞队列的特点&quot;&gt;&lt;a href=&quot;#阻塞队列的特点&quot; class=&quot;headerlink&quot; title=&quot;阻塞队列的特点&quot;&gt;&lt;/a&gt;阻塞队列的特点&lt;/h2&gt;&lt;p&gt;想着就想着先写一个，阻塞队列的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个有限的存数据的队列；&lt;/li&gt;
&lt;li&gt;入队的时候要判断队列是否已满；已满的时候，入队的线程要阻塞等待，直到队列有空位，被唤醒继续入队；&lt;/li&gt;
&lt;li&gt;出队的时候要判断队列是否为空；为空的时候，获取队列数据的线程阻塞等待，直到队列有新数据的时候被唤醒继续执行；&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 日志管理工具 - Logrotate</title>
    <link href="http://chenzhijun.me/2020/05/20/linux-log-tool-logrotate/"/>
    <id>http://chenzhijun.me/2020/05/20/linux-log-tool-logrotate/</id>
    <published>2020-05-20T14:35:30.000Z</published>
    <updated>2020-05-27T08:12:06.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-日志管理工具-Logrotate"><a href="#Linux-日志管理工具-Logrotate" class="headerlink" title="Linux 日志管理工具 - Logrotate"></a>Linux 日志管理工具 - Logrotate</h1><p>最近在使用 openresty(nginx) 作为容器平台 kubernetes 的入口路由服务；流程大致为前端新建一个路由规则的时候，获取到 svc 的 endpoint 然后将其作为 nginx 的后端服务。实时监听 svc 的状态然后更新 ep 到 nginx；这里遇到一个问题，nginx 本身没有做到日志切割，在上线一段时间之后，nginx 的 vhost_access.log 日志文件竟然达到了 50G ，导致出现系统磁盘告警。google 一下没发现 nginx 有自带的日志轮转的功能（其实也有，只是要装插件和重新编译）；在线上最好的方式是什么了？最后采用了 Logrotate 来做日志切割。</p><span id="more"></span><p>logrotate 的主要功能为定时对增长中的日志文件进行自动切割，压缩，删除等操作；可以将定时任务设置为日，周，月，也可以自定义 crontab 的时间执行。</p><h2 id="Logrotate-安装与配置文件"><a href="#Logrotate-安装与配置文件" class="headerlink" title="Logrotate 安装与配置文件"></a>Logrotate 安装与配置文件</h2><p>首先需要安装 Logrotate： <code>yum install -y logrotate</code>; 安装完之后可以看到，默认是在<code>/etc/cron.daily/logrotate</code> 有一个定时执行任务。<code>/etc/cron.daily/logrotate</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">/usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status /etc/logrotate.conf</span><br><span class="line">EXITVALUE=$?</span><br><span class="line">if [ $EXITVALUE != 0 ]; then</span><br><span class="line">    /usr/bin/logger -t logrotate &quot;ALERT exited abnormally with [$EXITVALUE]&quot;</span><br><span class="line">fi</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>另外我们可以看到它的配置文件:</p><p><img src="/images/qiniu/2020-05-20-22-59-26.png" alt="2020-05-20-22-59-26"></p><p>它的配置主要在<code>/etc/logrotate.conf</code>文件以及<code>/etc/logrotate.d/</code>目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># see &quot;man logrotate&quot; for details</span><br><span class="line"># rotate log files weekly</span><br><span class="line">weekly</span><br><span class="line"></span><br><span class="line"># keep 4 weeks worth of backlogs</span><br><span class="line">rotate 4</span><br><span class="line"></span><br><span class="line"># create new (empty) log files after rotating old ones</span><br><span class="line">create</span><br><span class="line"></span><br><span class="line"># use date as a suffix of the rotated file</span><br><span class="line">dateext</span><br><span class="line"></span><br><span class="line"># uncomment this if you want your log files compressed</span><br><span class="line">#compress</span><br><span class="line"></span><br><span class="line"># RPM packages drop log rotation information into this directory</span><br><span class="line">include &#x2F;etc&#x2F;logrotate.d</span><br><span class="line"></span><br><span class="line"># no packages own wtmp and btmp -- we&#39;ll rotate them here</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;wtmp &#123;</span><br><span class="line">    monthly</span><br><span class="line">    create 0664 root utmp</span><br><span class="line">minsize 1M</span><br><span class="line">    rotate 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;var&#x2F;log&#x2F;btmp &#123;</span><br><span class="line">    missingok</span><br><span class="line">    monthly</span><br><span class="line">    create 0600 root utmp</span><br><span class="line">    rotate 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开它的主配置文件<code>/etc/logrotate.conf</code>可以看到它的一个配置：<code>include /etc/logrotate.d</code>，所以我们的配置基本上可以放到这个<code>logrotate.d</code>目录下。</p><h2 id="Logrotate-实际配置与操作"><a href="#Logrotate-实际配置与操作" class="headerlink" title="Logrotate 实际配置与操作"></a>Logrotate 实际配置与操作</h2><p>在<code>/etc/logrotate.d</code>目录下我们可以新建一个<code>ingress</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;data&#x2F;caas&#x2F;ingress-gateway 目录下的 *log 文件都会进行正则匹配</span><br><span class="line">&#x2F;data&#x2F;caas&#x2F;ingress-gateway&#x2F;*log &#123;</span><br><span class="line">    # 先进行 copy,然后进行 truncate，这里注意，在 truncate 的时间可能有一部分无法 copy 所以导致丢失数据。</span><br><span class="line">    copytruncate</span><br><span class="line">    # 服务&#x2F;etc&#x2F;</span><br><span class="line">    daily</span><br><span class="line">    # 创建新文件</span><br><span class="line">    create</span><br><span class="line">    # 保留切割的历史文件</span><br><span class="line">    rotate 100</span><br><span class="line">    # 正则匹配下一个 log 切割出错，继续执行，不然会中断</span><br><span class="line">    missingok</span><br><span class="line">    # 非空才执行</span><br><span class="line">    notifempty</span><br><span class="line">    # 对切割的日志进行压缩</span><br><span class="line">    compress</span><br><span class="line">    # 对于满足条件的 log，只运行一次脚本</span><br><span class="line">    sharedscripts</span><br><span class="line">    # 日志大小满足 400M 进行切割</span><br><span class="line">    size 400M</span><br><span class="line">    # 创建新目录用来存储旧的日志</span><br><span class="line">    createolddir</span><br><span class="line">    # 旧的日志目录</span><br><span class="line">    olddir &#x2F;data&#x2F;caas&#x2F;ingress-gateway&#x2F;bak</span><br><span class="line">    # 切割后的文件的带时间后缀，不然默认是log.1，log.2</span><br><span class="line">    dateext</span><br><span class="line">    # 使用 dateext 时候的日志格式</span><br><span class="line">    dateformat -%Y%m%d%H</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目录下的配置项如果没有的会使用 <code>/etc/logrotate.conf</code> 的默认配置，如果有的会覆盖掉全局配置使用自己定义的配置。在我上面定义的是一个将文件进行备份后进行 truncate 的操作，这种操作的好处就是容器与日志文件的句柄不会断。当然还有另一种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;data&#x2F;caas&#x2F;ingress-gateway&#x2F;*log &#123;</span><br><span class="line">    #copytruncate</span><br><span class="line">    daily</span><br><span class="line">    create</span><br><span class="line">    rotate 100</span><br><span class="line">    missingok</span><br><span class="line">    notifempty</span><br><span class="line">    compress</span><br><span class="line">    sharedscripts</span><br><span class="line">    size 400M</span><br><span class="line">    createolddir</span><br><span class="line">    olddir &#x2F;data&#x2F;caas&#x2F;ingress-gateway&#x2F;bak</span><br><span class="line">    dateext</span><br><span class="line">    dateformat -%Y%m%d%H</span><br><span class="line">    # 日志切割完之后进行执行脚本，必须空行</span><br><span class="line">    postrotate</span><br><span class="line">       docker ps|grep ingress-gateway|grep -v pause|awk &#39;&#123;print $1&#125;&#39;|xargs docker rm -f</span><br><span class="line">    endscript</span><br><span class="line">    # 和 postrotate 进行对应</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强制执行方式：</p><p><code>logrotate -fv /etc/logrotate.d/ingress3</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-f 强制执行</span><br><span class="line">-d debug 模式</span><br><span class="line">-v 显示输出</span><br><span class="line">-s 状态文件路径</span><br><span class="line"></span><br></pre></td></tr></table></figure><!--#config logrotatecat > /etc/logrotate.d/ingress << EOF/data/wisecloud/ingress-gateway/*log {    copytruncate    daily    create    rotate 15    missingok    notifempty    compress    sharedscripts    size 1G    createolddir    olddir /data/wisecloud/ingress-gateway/bak    dateext    dateformat -%Y%m%d%H}EOF-->]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux-日志管理工具-Logrotate&quot;&gt;&lt;a href=&quot;#Linux-日志管理工具-Logrotate&quot; class=&quot;headerlink&quot; title=&quot;Linux 日志管理工具 - Logrotate&quot;&gt;&lt;/a&gt;Linux 日志管理工具 - Logrotate&lt;/h1&gt;&lt;p&gt;最近在使用 openresty(nginx) 作为容器平台 kubernetes 的入口路由服务；流程大致为前端新建一个路由规则的时候，获取到 svc 的 endpoint 然后将其作为 nginx 的后端服务。实时监听 svc 的状态然后更新 ep 到 nginx；这里遇到一个问题，nginx 本身没有做到日志切割，在上线一段时间之后，nginx 的 vhost_access.log 日志文件竟然达到了 50G ，导致出现系统磁盘告警。google 一下没发现 nginx 有自带的日志轮转的功能（其实也有，只是要装插件和重新编译）；在线上最好的方式是什么了？最后采用了 Logrotate 来做日志切割。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://chenzhijun.me/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://chenzhijun.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Harbor  镜像仓库安装与 Helm Chart 管理</title>
    <link href="http://chenzhijun.me/2020/04/26/harbor-install-and-trouble-shooting/"/>
    <id>http://chenzhijun.me/2020/04/26/harbor-install-and-trouble-shooting/</id>
    <published>2020-04-26T13:02:35.000Z</published>
    <updated>2021-02-02T01:45:29.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Harbor-镜像仓库安装与-Helm-Chart-管理"><a href="#Harbor-镜像仓库安装与-Helm-Chart-管理" class="headerlink" title="Harbor  镜像仓库安装与 Helm Chart 管理"></a>Harbor  镜像仓库安装与 Helm Chart 管理</h1><p><a href="https://goharbor.io/">Harbor</a> 是一款非常优秀的企业级开源镜像仓库管理器。Harbor 是基于 Docker Registry之上带有用户权限控制，镜像扫描，镜像签名的款工具。用起来很方便，我们公司目前在测试和生产都在使用。从去年 10 月到今天，除去一次 ceph 集群扩容，没有发生一次事故，一直运行很稳定；本文将记录一下我们的使用方式和遇到的一些问题解决方式。</p><h2 id="Harbor-资源准备"><a href="#Harbor-资源准备" class="headerlink" title="Harbor 资源准备"></a>Harbor 资源准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Harbor 1.7.6 版本</span><br><span class="line">Redis 4.0</span><br><span class="line">Postgres 10.6</span><br><span class="line">Docker 1.13.1</span><br><span class="line">docker-compose 1.18.0</span><br><span class="line">Ceph 12</span><br><span class="line"></span><br><span class="line">haproxy 机器 2 台</span><br><span class="line">VIP 1 个</span><br><span class="line">Harbor 主机 2 台</span><br></pre></td></tr></table></figure><p>公司目前的 harbor 是基于 1.76 搭建的高可用方案，证书的问题，我们是公网使用第三方证书。内网使用自签名的证书；在我这里，我在 harbor 的搭建中采用的是内部 http，外部挂 F5。架构图如下：</p><p><img src="/images/qiniu/2020-04-26-21-15-43.png" alt="2020-04-26-21-15-43"></p><p>生产上我们用 F5 替代 Haproxy。</p><p>我们在 Haproxy/F5 层将 https 转成 http 再转发给内部 harbor。</p><span id="more"></span><h3 id="下载-harbor-并进行配置"><a href="#下载-harbor-并进行配置" class="headerlink" title="下载 harbor 并进行配置"></a>下载 harbor 并进行配置</h3><p>直接去github release 下载 1.7.6 的版本（现在最新为 1.10）。下载之后解压，修改里面<code>harbor.cfg</code>配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line">## Configuration file of Harbor</span><br><span class="line"></span><br><span class="line">#This attribute is for migrator to detect the version of the .cfg file, DO NOT MODIFY!</span><br><span class="line">_version &#x3D; 1.7.0</span><br><span class="line">#The IP address or hostname to access admin UI and registry service.</span><br><span class="line">#DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span><br><span class="line">#DO NOT comment out this line, modify the value of &quot;hostname&quot; directly, or the installation will fail.</span><br><span class="line">hostname &#x3D; harbor.chenzhijun.me</span><br><span class="line"></span><br><span class="line">#The protocol for accessing the UI and token&#x2F;notification service, by default it is http.</span><br><span class="line">#It can be set to https if ssl is enabled on nginx.</span><br><span class="line">ui_url_protocol &#x3D; http</span><br><span class="line"></span><br><span class="line">#Maximum number of job workers in job service</span><br><span class="line">max_job_workers &#x3D; 10</span><br><span class="line"></span><br><span class="line">#Determine whether or not to generate certificate for the registry&#39;s token.</span><br><span class="line">#If the value is on, the prepare script creates new root cert and private key</span><br><span class="line">#for generating token to access the registry. If the value is off the default key&#x2F;cert will be used.</span><br><span class="line">#This flag also controls the creation of the notary signer&#39;s cert.</span><br><span class="line">#这里我选择的是 off，开 notary 的话必须指定https，如果不开 notary 的话，可以不用管。</span><br><span class="line">customize_crt &#x3D; off</span><br><span class="line"></span><br><span class="line">#The path of cert and key files for nginx, they are applied only the protocol is set to https</span><br><span class="line">ssl_cert &#x3D; &#x2F;data&#x2F;cert&#x2F;server.crt</span><br><span class="line">ssl_cert_key &#x3D; &#x2F;data&#x2F;cert&#x2F;server.key</span><br><span class="line"></span><br><span class="line">#The path of secretkey storage</span><br><span class="line">secretkey_path &#x3D; &#x2F;data</span><br><span class="line"></span><br><span class="line">#Admiral&#39;s url, comment this attribute, or set its value to NA when Harbor is standalone</span><br><span class="line">admiral_url &#x3D; NA</span><br><span class="line"></span><br><span class="line">#Log files are rotated log_rotate_count times before being removed. If count is 0, old versions are removed rather than rotated.</span><br><span class="line">log_rotate_count &#x3D; 50</span><br><span class="line">#Log files are rotated only if they grow bigger than log_rotate_size bytes. If size is followed by k, the size is assumed to be in kilobytes.</span><br><span class="line">#If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G</span><br><span class="line">#are all valid.</span><br><span class="line">log_rotate_size &#x3D; 200M</span><br><span class="line"></span><br><span class="line">#Config http proxy for Clair, e.g. http:&#x2F;&#x2F;my.proxy.com:3128</span><br><span class="line">#Clair doesn&#39;t need to connect to harbor internal components via http proxy.</span><br><span class="line">http_proxy &#x3D;</span><br><span class="line">https_proxy &#x3D;</span><br><span class="line">no_proxy &#x3D; 127.0.0.1,localhost,core,registry</span><br><span class="line"></span><br><span class="line">#NOTES: The properties between BEGIN INITIAL PROPERTIES and END INITIAL PROPERTIES</span><br><span class="line">#only take effect in the first boot, the subsequent changes of these properties</span><br><span class="line">#should be performed on web ui</span><br><span class="line"></span><br><span class="line">#************************BEGIN INITIAL PROPERTIES************************</span><br><span class="line"></span><br><span class="line">#Email account settings for sending out password resetting emails.</span><br><span class="line"></span><br><span class="line">#Email server uses the given username and password to authenticate on TLS connections to host and act as identity.</span><br><span class="line">#Identity left blank to act as username.</span><br><span class="line">email_identity &#x3D;</span><br><span class="line"></span><br><span class="line">email_server &#x3D; smtp.mydomain.com</span><br><span class="line">email_server_port &#x3D; 25</span><br><span class="line">email_username &#x3D; sample_admin@mydomain.com</span><br><span class="line">email_password &#x3D; abc</span><br><span class="line">email_from &#x3D; admin &lt;sample_admin@mydomain.com&gt;</span><br><span class="line">email_ssl &#x3D; false</span><br><span class="line">email_insecure &#x3D; false</span><br><span class="line"></span><br><span class="line">##The initial password of Harbor admin, only works for the first time when Harbor starts.</span><br><span class="line">#It has no effect after the first launch of Harbor.</span><br><span class="line">#Change the admin password from UI after launching Harbor.</span><br><span class="line">harbor_admin_password &#x3D; Harbor12345</span><br><span class="line"></span><br><span class="line">##By default the auth mode is db_auth, i.e. the credentials are stored in a local database.</span><br><span class="line">#Set it to ldap_auth if you want to verify a user&#39;s credentials against an LDAP server.</span><br><span class="line">auth_mode &#x3D; db_auth</span><br><span class="line"></span><br><span class="line">#The url for an ldap endpoint.</span><br><span class="line">ldap_url &#x3D; ldaps:&#x2F;&#x2F;ldap.mydomain.com</span><br><span class="line"></span><br><span class="line">#A user&#39;s DN who has the permission to search the LDAP&#x2F;AD server.</span><br><span class="line">#If your LDAP&#x2F;AD server does not support anonymous search, you should configure this DN and ldap_search_pwd.</span><br><span class="line">#ldap_searchdn &#x3D; uid&#x3D;searchuser,ou&#x3D;people,dc&#x3D;mydomain,dc&#x3D;com</span><br><span class="line"></span><br><span class="line">#the password of the ldap_searchdn</span><br><span class="line">#ldap_search_pwd &#x3D; password</span><br><span class="line"></span><br><span class="line">#The base DN from which to look up a user in LDAP&#x2F;AD</span><br><span class="line">ldap_basedn &#x3D; ou&#x3D;people,dc&#x3D;mydomain,dc&#x3D;com</span><br><span class="line"></span><br><span class="line">#Search filter for LDAP&#x2F;AD, make sure the syntax of the filter is correct.</span><br><span class="line">#ldap_filter &#x3D; (objectClass&#x3D;person)</span><br><span class="line"></span><br><span class="line"># The attribute used in a search to match a user, it could be uid, cn, email, sAMAccountName or other attributes depending on your LDAP&#x2F;AD</span><br><span class="line">ldap_uid &#x3D; uid</span><br><span class="line"></span><br><span class="line">#the scope to search for users, 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE</span><br><span class="line">ldap_scope &#x3D; 2</span><br><span class="line"></span><br><span class="line">#Timeout (in seconds)  when connecting to an LDAP Server. The default value (and most reasonable) is 5 seconds.</span><br><span class="line">ldap_timeout &#x3D; 5</span><br><span class="line"></span><br><span class="line">#Verify certificate from LDAP server</span><br><span class="line">ldap_verify_cert &#x3D; true</span><br><span class="line"></span><br><span class="line">#The base dn from which to lookup a group in LDAP&#x2F;AD</span><br><span class="line">ldap_group_basedn &#x3D; ou&#x3D;group,dc&#x3D;mydomain,dc&#x3D;com</span><br><span class="line"></span><br><span class="line">#filter to search LDAP&#x2F;AD group</span><br><span class="line">ldap_group_filter &#x3D; objectclass&#x3D;group</span><br><span class="line"></span><br><span class="line">#The attribute used to name a LDAP&#x2F;AD group, it could be cn, name</span><br><span class="line">ldap_group_gid &#x3D; cn</span><br><span class="line"></span><br><span class="line">#The scope to search for ldap groups. 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE</span><br><span class="line">ldap_group_scope &#x3D; 2</span><br><span class="line"></span><br><span class="line">#Turn on or off the self-registration feature</span><br><span class="line"># 是否允许自注册</span><br><span class="line">self_registration &#x3D; on</span><br><span class="line"></span><br><span class="line">#The expiration time (in minute) of token created by token service, default is 30 minutes</span><br><span class="line">token_expiration &#x3D; 30</span><br><span class="line"></span><br><span class="line">#The flag to control what users have permission to create projects</span><br><span class="line">#The default value &quot;everyone&quot; allows everyone to creates a project.</span><br><span class="line">#Set to &quot;adminonly&quot; so that only admin user can create project.</span><br><span class="line">project_creation_restriction &#x3D; everyone</span><br><span class="line"></span><br><span class="line">#************************END INITIAL PROPERTIES************************</span><br><span class="line"></span><br><span class="line">#######Harbor DB configuration section#######</span><br><span class="line"></span><br><span class="line">#The address of the Harbor database. Only need to change when using external db.</span><br><span class="line">#db的主机</span><br><span class="line">db_host &#x3D; 172.88.14.88</span><br><span class="line"></span><br><span class="line">#The password for the root user of Harbor DB. Change this before any production use.</span><br><span class="line">db_password &#x3D; 123456</span><br><span class="line"></span><br><span class="line">#The port of Harbor database host</span><br><span class="line">db_port &#x3D; 5432</span><br><span class="line"></span><br><span class="line">#The user name of Harbor database</span><br><span class="line">db_user &#x3D; postgres</span><br><span class="line"></span><br><span class="line">##### End of Harbor DB configuration#######</span><br><span class="line"></span><br><span class="line">##########Redis server configuration.############</span><br><span class="line"></span><br><span class="line">#Redis connection address</span><br><span class="line">redis_host &#x3D; 172.88.14.88</span><br><span class="line"></span><br><span class="line">#Redis connection port</span><br><span class="line">redis_port &#x3D; 6379</span><br><span class="line"></span><br><span class="line">#Redis connection password</span><br><span class="line">redis_password &#x3D;</span><br><span class="line"></span><br><span class="line">#Redis connection db index</span><br><span class="line">#db_index 1,2,3 is for registry, jobservice and chartmuseum.</span><br><span class="line">#db_index 0 is for UI, it&#39;s unchangeable</span><br><span class="line">redis_db_index &#x3D; 1,2,3</span><br><span class="line"></span><br><span class="line">########## End of Redis server configuration ############</span><br><span class="line"></span><br><span class="line">##########Clair DB configuration############</span><br><span class="line"></span><br><span class="line">#Clair DB host address. Only change it when using an exteral DB.</span><br><span class="line"></span><br><span class="line">clair_db_host &#x3D; 172.88.14.88</span><br><span class="line">#The password of the Clair&#39;s postgres database. Only effective when Harbor is deployed with Clair.</span><br><span class="line">#Please update it before deployment. Subsequent update will cause Clair&#39;s API server and Harbor unable to access Clair&#39;s database.</span><br><span class="line">clair_db_password &#x3D; 123456</span><br><span class="line">#Clair DB connect port</span><br><span class="line">clair_db_port &#x3D; 5432</span><br><span class="line">#Clair DB username</span><br><span class="line">clair_db_username &#x3D; postgres</span><br><span class="line">#Clair default database</span><br><span class="line">clair_db &#x3D; postgres</span><br><span class="line"></span><br><span class="line">#The interval of clair updaters, the unit is hour, set to 0 to disable the updaters.</span><br><span class="line">clair_updaters_interval &#x3D; 12</span><br><span class="line"></span><br><span class="line">##########End of Clair DB configuration############</span><br><span class="line"></span><br><span class="line">#The following attributes only need to be set when auth mode is uaa_auth</span><br><span class="line">uaa_endpoint &#x3D; uaa.mydomain.org</span><br><span class="line">uaa_clientid &#x3D; id</span><br><span class="line">uaa_clientsecret &#x3D; secret</span><br><span class="line">uaa_verify_cert &#x3D; true</span><br><span class="line">uaa_ca_cert &#x3D; &#x2F;path&#x2F;to&#x2F;ca.pem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Harbor Storage settings ###</span><br><span class="line">#Please be aware that the following storage settings will be applied to both docker registry and helm chart repository.</span><br><span class="line">#registry_storage_provider can be: filesystem, s3, gcs, azure, etc.</span><br><span class="line">#registry_storage_provider_name &#x3D; filesystem</span><br><span class="line">registry_storage_provider_name &#x3D; s3</span><br><span class="line"></span><br><span class="line">#registry_storage_provider_config is a comma separated &quot;key: value&quot; pairs, e.g. &quot;key1: value, key2: value2&quot;.</span><br><span class="line">#To avoid duplicated configurations, both docker registry and chart repository follow the same storage configuration specifications of docker registry.</span><br><span class="line">#Refer to https:&#x2F;&#x2F;docs.docker.com&#x2F;registry&#x2F;configuration&#x2F;#storage for all available configuration.</span><br><span class="line"></span><br><span class="line">#registry_storage_provider_config &#x3D;</span><br><span class="line">#配置ceph 存储</span><br><span class="line">registry_storage_provider_config &#x3D; bucket: f4gkewos23fdsf8fnfhG, region: default, accesskey: QaidfneuhgfE2dife, secretkey: qyIJDFNGIDNDKF8f2r3G5QSw, regionendpoint: http:&#x2F;&#x2F;ceph.chenzhijun.me, rootdirectory: &#x2F;harbor-registry&#x2F;di</span><br><span class="line"></span><br><span class="line">#registry_custom_ca_bundle is the path to the custom root ca certificate, which will be injected into the truststore</span><br><span class="line">#of registry&#39;s and chart repository&#39;s containers.  This is usually needed when the user hosts a internal storage with self signed certificate.</span><br><span class="line">registry_custom_ca_bundle &#x3D;</span><br><span class="line"></span><br><span class="line">#If reload_config&#x3D;true, all settings which present in harbor.cfg take effect after prepare and restart harbor, it overwrites exsiting settings.</span><br><span class="line">#reload_config&#x3D;true</span><br><span class="line">#Regular expression to match skipped environment variables</span><br><span class="line">#skip_reload_env_pattern&#x3D;(^EMAIL.*)|(^LDAP.*)</span><br></pre></td></tr></table></figure><p>配置好 cfg 文件后，我们开始我们的操作。</p><ol start="0"><li><p>申请或安装 ceph，ceph 版本为 12；</p></li><li><p>安装 pg 数据库(生产应为高可用)：</p></li></ol><p><code>docker run --name pg -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d postgres:10.6</code></p><ol start="2"><li>安装 redis（生产因为高可用）：</li></ol><p><code>docker run --name redis -p 6379:6379 -d redis</code></p><ol start="3"><li>安装 harbor：</li></ol><p><code>./install.sh --with-clair --with-chartmuseum</code></p><p>这里除了 notaty 必须要有个 https 外，其他的你都可以装。clair 是镜像扫描工具；chartmuseum 是 helm chart ；<br>你需要在两台机器都启动，并且保持cfg 文件一致。</p><ol start="4"><li>配置 haproxy(F5)</li></ol><p>如果在 F5 做 https 转 http，那haproxy 就正常启动并将后段指向 harbor 地址就可以了。如果是让 https 做证书认证，那么就按照配置就好。我这边有在 F5 做解证书，贴一份 haproxy 的配置吧<code>haproxy.cfg</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">  daemon</span><br><span class="line">  log  127.0.0.1 local0 info</span><br><span class="line">  maxconn  20000</span><br><span class="line">  pidfile  &#x2F;app&#x2F;haproxy&#x2F;run&#x2F;haproxy.pid</span><br><span class="line">  stats  socket &#x2F;app&#x2F;haproxy&#x2F;lib&#x2F;haproxy&#x2F;stats</span><br><span class="line">  tune.bufsize  131072</span><br><span class="line">  user mwop</span><br><span class="line">  group mwop</span><br><span class="line">  tune.ssl.default-dh-param 2048</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  log  global</span><br><span class="line">  maxconn  10000</span><br><span class="line">  mode  http</span><br><span class="line">  option  dontlog-normal</span><br><span class="line">  option  http-server-close</span><br><span class="line">  retries  3</span><br><span class="line">  #stats  enable</span><br><span class="line">  timeout  http-request 100s</span><br><span class="line">  timeout  queue 1m</span><br><span class="line">  timeout  connect 10s</span><br><span class="line">  timeout  client 1m</span><br><span class="line">  timeout  server 30m</span><br><span class="line">  timeout  check 10s</span><br><span class="line"></span><br><span class="line">listen Stats</span><br><span class="line">  bind 0.0.0.0:10000</span><br><span class="line">  mode http</span><br><span class="line">  stats enable</span><br><span class="line">  stats uri &#x2F;</span><br><span class="line">  stats refresh 5s</span><br><span class="line">  stats show-node</span><br><span class="line">  stats show-legends</span><br><span class="line">  stats hide-version</span><br><span class="line"></span><br><span class="line">listen app1</span><br><span class="line">    bind :80</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    mode tcp</span><br><span class="line">    server s1  172.0.0.1:80   weight 1</span><br><span class="line">    server s2  172.0.0.2:80   weight 1</span><br><span class="line">    </span><br><span class="line">listen app2</span><br><span class="line">    bind :443 </span><br><span class="line">    balance     roundrobin</span><br><span class="line">    mode tcp</span><br><span class="line">    server s1  172.0.0.1:443   weight 1</span><br><span class="line">    server s2  172.0.0.2:443   weight 1</span><br></pre></td></tr></table></figure><p>访问<code>harbor.chenzhijun.me</code>就可以了。</p><p><img src="/images/qiniu/2020-04-26-21-43-00.png" alt="2020-04-26-21-43-00"></p><h3 id="https-问题-1-docker-login-failed"><a href="#https-问题-1-docker-login-failed" class="headerlink" title="https 问题 1 : docker login failed"></a>https 问题 1 : docker login failed</h3><p>安装完之后，你可能会遇到一些问题，比如在你直接 docker login 出现:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: Get https:&#x2F;&#x2F;harbor.chenzhijun.me&#x2F;v2&#x2F;: Get http:&#x2F;&#x2F;harbor.chenzhijun.me&#x2F;service&#x2F;token?account&#x3D;admin&amp;client_id&#x3D;docker&amp;offline_token&#x3D;true&amp;service&#x3D;harbor-registry: dial tcp 100.77.53.130:80: getsockopt: connection refused</span><br></pre></td></tr></table></figure><p>你在页面登陆可以，当是你用 docker login却有问题。你可以<code>curl -X GET -I &quot;https://harbor.chenzhijun.me/v2/&quot;</code>看一下是否返回了一个 http 的请求。如果是的话，修改一个参数：<code>sed -i &quot;s/realm: http/realm: https/g&quot; common/config/registry/config.yml</code>;在<code>common/config/registry/config.yml</code>中修改返回值为 https：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">token:</span></span><br><span class="line">    <span class="attr">issuer:</span> <span class="string">harbor-token-issuer</span></span><br><span class="line">    <span class="attr">realm:</span> <span class="string">https://harbor.chenzhijun.me/service/token</span> <span class="comment">#就是这里要返回 https 而不是 http</span></span><br><span class="line">    <span class="attr">rootcertbundle:</span> <span class="string">/etc/registry/root.crt</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">harbor-registry</span></span><br></pre></td></tr></table></figure><p>这个地方改不是特别好改，我是在<code>install.sh</code>在 docker-compose启动之前加入的这个 sed 命令；</p><p><img src="/images/qiniu/2020-04-26-22-00-25.png" alt="2020-04-26-22-00-25"></p><p>然后再 curl 一下看是不是返回 https 的结果了。如果是就可以了。</p><h3 id="https-问题2-docker-push-出现-unkown-blob"><a href="#https-问题2-docker-push-出现-unkown-blob" class="headerlink" title="https 问题2 : docker push 出现 unkown blob"></a>https 问题2 : docker push 出现 unkown blob</h3><p>因为我们的架构是：域名 –&gt; dns解析到 –&gt; F5 VIP –&gt; haproxy –&gt; Harbor docker-compose;</p><p>在这个过程中，出现了一个问题。域名到到 F5是 https，而后面的 Harbor 接到的 http；所以在 docker login 成功。在 docker push 的时候出现了问题 <code>unkown blob</code>；这个问题的原因就是在反向代理中 harbor 的 nginx 代理用的还是 https 方式：<a href="https://github.com/goharbor/harbor/blob/release-1.7.0/docs/installation_guide.md#Troubleshooting">Harbor Troubleshooting</a>。修改<code>common/templates/nginx/nginx.http.conf</code>中的<code>proxy_set_header X-Forwarded-Proto $scheme;</code>把这行注释掉就可以了。</p><p>另外就是要注意 pg 的权限问题。</p><h3 id="https-问题3-docker-push-出现-unauthorized-authentication-required"><a href="#https-问题3-docker-push-出现-unauthorized-authentication-required" class="headerlink" title="https 问题3: docker push 出现 unauthorized: authentication required"></a>https 问题3: docker push 出现 unauthorized: authentication required</h3><p>这是一个很诡异的问题，找了我两个小时；现象是harbor 的页面能登陆，并且页面一切功能正常；直接使用 docker login 也是没有问题，但是在 push 镜像的时候出现，unauthorized: authentication required;明明已经登陆了，也没有问题，但是不知道为啥还是会报错。这个问题在我这里是由于 haproxy 的配置出现的问题。harbor push 镜像的过程是从 harbor 服务获取一个 token，然后再去访问 registry 的存储来存储数据，如果是是本地存储，那么会访问 80 端口。我的配置中将 haproxy 的 80 端口转了 redirect，所以导致认证失败。附上一段在 haproxy 段做证书解析而后端 harbor 为 http 的 haproxy 的服务配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">frontend harbor</span><br><span class="line">  bind *:80</span><br><span class="line">  bind *:443 ssl crt &#x2F;data&#x2F;harbor&#x2F;harbor&#x2F;chenzhijun.me.pem</span><br><span class="line">  reqadd X-Forwarded-Proto:\ https</span><br><span class="line">  default_backend  harbor-backend</span><br><span class="line"></span><br><span class="line">backend harbor-backend</span><br><span class="line">  balance  source</span><br><span class="line">  mode  http</span><br><span class="line">  timeout  client 3h</span><br><span class="line">  timeout  server 3h</span><br><span class="line">  server server1 10.1.1.2:80  check inter 2000 fall 3</span><br></pre></td></tr></table></figure><p>如果还是有问题，可以在<code>/var/log/harbor</code>目录下查看相关的 log 日志。也可以查看系统日志：<code>/var/log/message</code>来定位问题。</p><p>我们也安装了 <code>/install.sh --with-clair --with-chartmuseum</code> clair 和 chartmuseum，这两个工具，clair 的主要目的是扫描 CVE 漏洞，所以是不是需要链接一下外网更新一下；chartmuseum 是一个 helm chart 管理器;</p><p><img src="/images/qiniu/2020-04-26-22-15-03.png" alt="2020-04-26-22-15-03"></p><p><img src="/images/qiniu/2020-04-26-22-16-24.png" alt="2020-04-26-22-16-24"></p><h2 id="升级问题"><a href="#升级问题" class="headerlink" title="升级问题"></a>升级问题</h2><p>最近尝试在本地进行了一次 1.7 升级到 1.8，其实还好啊，就是 cfg 文件变成了 yml 文件，其他的还是一样。并且有迁移工具：<br><a href="https://github.com/goharbor/harbor/blob/release-1.8.0/docs/migration_guide.md">https://github.com/goharbor/harbor/blob/release-1.8.0/docs/migration_guide.md</a></p><p>迁移工具使用方式：</p><p><code>docker run -it --rm -v /data/harbor/harbor/harbor.cfg:/harbor-migration/harbor-cfg/harbor.cfg -v /data/harbor/harbor/harbor.yml:/harbor-migration/harbor-cfg-out/harbor.yml harbor.uat.x.com/goharbor/harbor-migrator:v1.8.3 --cfg up</code></p><p>然后就停掉原来的 1.7 使用新的 1.8 的安装包启动就可以了。</p><p>迁移前一定要进行数据备份，一定要备份。</p><h2 id="helm-使用"><a href="#helm-使用" class="headerlink" title="helm 使用"></a>helm 使用</h2><p>helm 在 v3 之后（我只用了 v3）其实特别好用。在 github 上下载 helm 的安装包，然后把 helm 放到 /usr/local/bin 下面就可以直接执行 helm 命令了。当然前提是要本机有 kubectl，并且本地有 kubeconfig 文件<code>~/.kube/config</code>。这样我们就能愉快的使用 helm 了。那我们怎么使用 harbor 来管理我们的 helm chart 了？</p><p><code>helm repo add --username readonly --password Read2019 myharbor http://harbor.chenzhijun.me/chartrepo/helm-repo</code></p><p><code>http://harbor.chenzhijun.me/chartrepo/</code> 这一段是固定的，<code>helm-repo</code>是 harbor 中的 project 名。然后你将一个 chart 包导入：</p><p><img src="/images/qiniu/2020-04-26-22-25-53.png" alt="2020-04-26-22-25-53"></p><p><code>helm search repo myharbor</code></p><p><code>helm repo update</code></p><p><code>helm install myharbor/consul --gernerate-name</code></p><p>好了，就是这么简单粗暴。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Harbor-镜像仓库安装与-Helm-Chart-管理&quot;&gt;&lt;a href=&quot;#Harbor-镜像仓库安装与-Helm-Chart-管理&quot; class=&quot;headerlink&quot; title=&quot;Harbor  镜像仓库安装与 Helm Chart 管理&quot;&gt;&lt;/a&gt;Harbor  镜像仓库安装与 Helm Chart 管理&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://goharbor.io/&quot;&gt;Harbor&lt;/a&gt; 是一款非常优秀的企业级开源镜像仓库管理器。Harbor 是基于 Docker Registry之上带有用户权限控制，镜像扫描，镜像签名的款工具。用起来很方便，我们公司目前在测试和生产都在使用。从去年 10 月到今天，除去一次 ceph 集群扩容，没有发生一次事故，一直运行很稳定；本文将记录一下我们的使用方式和遇到的一些问题解决方式。&lt;/p&gt;
&lt;h2 id=&quot;Harbor-资源准备&quot;&gt;&lt;a href=&quot;#Harbor-资源准备&quot; class=&quot;headerlink&quot; title=&quot;Harbor 资源准备&quot;&gt;&lt;/a&gt;Harbor 资源准备&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Harbor 1.7.6 版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Redis 4.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Postgres 10.6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Docker 1.13.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-compose 1.18.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ceph 12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;haproxy 机器 2 台&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VIP 1 个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Harbor 主机 2 台&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;公司目前的 harbor 是基于 1.76 搭建的高可用方案，证书的问题，我们是公网使用第三方证书。内网使用自签名的证书；在我这里，我在 harbor 的搭建中采用的是内部 http，外部挂 F5。架构图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/qiniu/2020-04-26-21-15-43.png&quot; alt=&quot;2020-04-26-21-15-43&quot;&gt;&lt;/p&gt;
&lt;p&gt;生产上我们用 F5 替代 Haproxy。&lt;/p&gt;
&lt;p&gt;我们在 Haproxy/F5 层将 https 转成 http 再转发给内部 harbor。&lt;/p&gt;</summary>
    
    
    
    <category term="Harbor" scheme="http://chenzhijun.me/categories/Harbor/"/>
    
    
    <category term="Harbor" scheme="http://chenzhijun.me/tags/Harbor/"/>
    
  </entry>
  
  <entry>
    <title>查漏补缺 Java 系列 - JVM 垃圾回收</title>
    <link href="http://chenzhijun.me/2020/04/05/what-is-garbage-to-need-collecter/"/>
    <id>http://chenzhijun.me/2020/04/05/what-is-garbage-to-need-collecter/</id>
    <published>2020-04-05T04:50:01.000Z</published>
    <updated>2020-05-12T04:56:03.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查漏补缺-Java-系列-JVM-垃圾回收"><a href="#查漏补缺-Java-系列-JVM-垃圾回收" class="headerlink" title="查漏补缺 Java 系列 - JVM 垃圾回收"></a>查漏补缺 Java 系列 - JVM 垃圾回收</h1><p>正如一间房子，房子的主人肯定需要在客人来的时候进行一些收拾，让家里显得更加的大，而让客人有更好的体验。JVM 也是一样，你想想，JVM 是不是也要不定时的清理下内存区域空间以便能让更多的线程有更好的执行体验？那主人在进行清理的时候，至少要知道要对哪个区域进行清理吧？要知道在哪个区域清理哪些垃圾吧？清理的过程是用拖把还是用扫把，要有个选择吧？你想想 JVM 是不是也应该是类似的？</p><h2 id="JVM-应该回收哪个区域的垃圾？"><a href="#JVM-应该回收哪个区域的垃圾？" class="headerlink" title="JVM 应该回收哪个区域的垃圾？"></a>JVM 应该回收哪个区域的垃圾？</h2><p>上一篇，我们介绍了 jvm 中一些基础概念，包括运行时内存区域。其中我们知道 jvm 规范中规定了5个运行时区域，一器两栈一堆一区。程序计数器，Java 虚拟机栈，本地方法栈，堆，方法区【运行时常量池（方法区内部）】；</p><p>JVM 这些区域里面我们可以分两类，一类需要重点关注 GC，一点可以不需要 GC。根据它们的生命周期可以看到虚拟机栈、本地方法栈、程序计数器这三个线程私有的区域，他们的生命周期跟线程的生命周期保持一样，他们的内存分配和回收时间是可以确定的，所以基本上用不上 GC；而方法区，堆他们需要在程序实际运行时才能知道需要创建哪些对象分配多大的空间，所以这部分是重点要关注的 GC 区域；</p><p>我们根据分配的时机来确定了需要进行垃圾回收的两个区域：堆，方法区。但是在 jvm 规范中对方法区进行了一个定义，也就是这块区域逻辑上属于堆，但是它可以不用 GC（上篇文章我有说到）。因此我们将重点放到堆（Heap）的回收中。</p><p>好了，我们现在知道哪个区域需要进行 GC 了，那么 JVM 又如何知道哪些是垃圾需要清理，哪些不是垃圾不需要清理了？因为堆主要是用来存放对象的，我们也可以当做，jvm 应该怎么判读一个对象是不是应该被回收？</p><span id="more"></span><h2 id="JVM-怎么判断是不是要回收的对象？"><a href="#JVM-怎么判断是不是要回收的对象？" class="headerlink" title="JVM 怎么判断是不是要回收的对象？"></a>JVM 怎么判断是不是要回收的对象？</h2><p>判断一个对象是不是应该被回收，通常是认为这个对象是否存活（有用）。判断的方式一般可以选择下面两种方法：1，引用计数法；2，可达性分析法。</p><p><code>引用计数法</code>就是给对象加一个引用计数器，每一次被引用到就加1，解除引用就减1。如果为 0 那就认为是需要被回收的，不能再继续使用了。这种方法效率高，一般情况下其实还不错，但是有个隐藏的问题，那就是对象之间的循环引用问题。</p><p>什么是循环引用呢？看下面的代码你就能很好地理解了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class CircularReference &#123;</span><br><span class="line">    public Object instance &#x3D; null;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        CircularReference objA &#x3D; new CircularReference();</span><br><span class="line">        CircularReference objB &#x3D; new CircularReference();</span><br><span class="line">        objA.instance &#x3D; objB;</span><br><span class="line">        objB.instance &#x3D; objA;</span><br><span class="line">        objA &#x3D; null;</span><br><span class="line">        objB &#x3D; null;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种方式就是<code>可达性分析法</code>，可达性分析就是从一个起始点出发（GC Roots），从这个节点往下搜索节点，两个点之间的路径叫做引用链条（Reference Chain）。当一个对象到 GC Roots 之间没有任何一条引用链，我们判断这个节点是可回收的对象。</p><p>可达性的图类似于下面这样：</p><p><img src="/images/qiniu/2020-04-05-14-59-07.png" alt="2020-04-05-14-59-07"></p><p>可达性分析可以解决循环引用的问题，你看上图的 a，b两个对象。从 GC Root 到 a,b 两者间是没有引用链的，所以是可以认为a,b 可以回收。但是 a，b 一定会回收吗？可达性分析的过程中，会要进行两次标记才能确定对象是否可以被回收，第一次可达性分析中，会将没有引用链的对象进行第一次标记并且进行一次筛选。筛选的条件主要是看对象是否有必要执行finalize()方法，如果对象没有覆盖 finalize() 方法，或者 finalize() 方法已经被虚拟机调用了，虚拟机认为这两种情况都属于“没有必要执行”。所以在被回收前，他们还是有一次机会进行“自救”的。如果第二次标记的时候对象还是没有引用链，那么就真的被回收了。</p><blockquote><p>虚拟机进行了一轮筛选后会将有必要执行 finalize()方法的对象发到一个 F-Queuen 的队列中，然后创建一个 Finalizer 线程去执行它。这里要注意虚拟机会触发执行它，但不承偌会等待其运行完，这样做的目的是为了防止 finalize() 方法执行缓慢，或者死循环，这样会导致 F-queuen 里面的所有对象都会处于永久等待状态，也可能导致整个内存回收系统崩溃。</p></blockquote><p>这是两种常用的判断对象是否可以进行回收的方法。</p><p>我们举个例子子说明：<br>假设现在你要堆家里进行大扫除，你需要整理一些垃圾扔掉，你应该怎么做？</p><p>如果你在家里做过大扫除，你肯定需要对物品进行判断是不是应该进行清理，你判断的方式可能是两种：1. 物品是属于谁的（开玩笑，要是你把女朋友的口红扔了试试？）；2. 物品还能不能用？</p><p>假设你跟你女朋友住一起，在打扫客厅的时候看到了一个空的薯片桶盒，你会想这是谁吃的，自己没吃过，问了女朋友，她也说没吃过。好了，反正就是没人认啦，然后这个盒子对于你是否有用了？至少对于大部分人来说是没用了（废物回收者除外），所以你就判断它是垃圾了。对吧。这是不是有点类似于引用计数法？有人用就+1，没人用就-1，为 0 就回收啊。</p><p>然后，你在打扫沙发的时候发现了一个未拆封的礼品盒，你确认这不是你的。然后你问你女朋友，这是不是她的？她说，这不是她的，但是这是她给她闺蜜买的礼物。这个时候你可以认为这个礼物属于女朋友闺蜜，女朋友闺蜜和女朋友有关联。你看这是不是可达？这个礼品盒（对象）和GC ROOT（女朋友）之间是不是有个引用链？那这个肯定就不是垃圾了。对吧。</p><h2 id="JVM-该怎么回收垃圾了？"><a href="#JVM-该怎么回收垃圾了？" class="headerlink" title="JVM 该怎么回收垃圾了？"></a>JVM 该怎么回收垃圾了？</h2><p>刚也说了，垃圾已经找出来了，但是现在就是要清理垃圾了。你把客厅的垃圾都扫出来了，总不可能就放在哪里不管了吧？</p><p>在 jvm 中有四个主要的垃圾收集算法：</p><ol><li>标记-清除算法；</li><li>复制算法；</li><li>标记-整理算法；</li><li>分代收集算法；</li></ol><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>先根据可达性分析标记出哪些需要进行回收，然后将对象进行回收。大致步骤：</p><ol><li>标记垃圾；</li><li>直接回收垃圾；</li></ol><p><img src="/images/qiniu/2020-04-06-18-26-50.png" alt="2020-04-06-18-26-50"></p><p>看图片就知道，实现的步骤很简单，就是标记，然后清除掉。这样的方式很简单暴力，但是也带来了问题，那就是不连续的内存段，导致空间浪费。空间浪费的原因就是它造成了很多碎片内存，你想啊，你要一个 3M 的连续内存空间，但是内存里面都是分散的 1M 的空间，你说气不气人？白白浪费了，不持家啊~~</p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>复制算法的流程大致如下：</p><ol><li>标记哪些是可回收的，哪些是使用中的；</li><li>将使用中的对象复制到内存的另一半空闲中；</li><li>清理掉需要回收的原来的一半内存；</li></ol><p><img src="/images/qiniu/2020-04-06-18-21-37.png" alt="2020-04-06-18-21-37"></p><p>复制算法的思路很清晰，就是把一块内存劈成两半，然后一半内存满了，就把这一半内存中有用的全部移动到另一个内存空间，再把原来满的一半全部清了。这种算法其实很好啊，你看就解决了内存不足的问题（可以回收），也解决了内存碎片的问题（复制的时候是连续的）。就是有个不好，明明有 100M 内存，但是你就是只能用 50M，你说气人不气人。另外复制算法带来了一个隐藏的问题，如果使用的一半内存中有 90% 的对象都是需要用到的，那可是要复制 90% 的对象到另一半中啊。你说怎么办？看下面的另一个算法</p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>如果复制的内容过多，那我们是不是可以不复制了？标记整理算法就可以这样。它的原理就是我把所有需要使用到的对象都往一边移动，然后移动到最后一个对象的时候，作为边界，把边界之后的全部删除掉，这样是不是就可以了？</p><p><img src="/images/qiniu/2020-04-06-18-43-10.png" alt="2020-04-06-18-43-10"></p><p>这样算法就是明显的使用的空间大了，但是如果是很多对象都存活着的话，那也是移动效率有点慢。</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>分代收集算法它其实是一种组合算法，我们可以看到上面的几个优缺点，标记清除有简单性，但是可能造成内存碎片；复制算法做到了内存的连续性，但是可能有大量复制（存货对象过多）而且内存利用率不太好；标记-整理算法看起来很不错，但是如果是只有少量的需要垃圾回收的对象了？那么移动每个对象就变成了很麻烦的操作。所以分代搜集算法就是在这种情况下产生的，既然其它算法都有好处，那我可不可以将一块大内存，划分为几块大小不一样的内存，然后每块内存里面采用不同的算法？这在虚拟机的实现过程中也是有这种考量的，比如 hotspot 虚拟机实现中就有下面的一个对象存活时间分析图：</p><p><img src="/images/qiniu/2020-04-06-21-08-37.png" alt="2020-04-06-21-08-37"></p><blockquote><p>图地址为：<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/generations.html#distribution_lifetimes">distribution_lifetimes</a></p></blockquote><p>可以看到如果以 x 轴为对象的生命周期，y 轴为对象内存分配空间。会发现很对的对象其实都是只有很短的生命周期，换通俗点说，就是很多对象可能就是朝生夕死；换人来说的话：吾朝闻道夕死可矣；换“对象(instance)”来说的话：活已经干完了，要杀要剐你看着办吧。总之你要知道，很多对象的生命周期都是很短的，所以如果不采用分代收集的话，那么对于一整块内存来说，最后做 GC 这个工作量会很大。</p><p>主流的虚拟机就开始想了个办法，既然一整块去收集集工作量大，那我可不可以让这个 GC 的时间提早？我把内存划分为几个区域，然后每个区域分代去回收内存是不是效率就高了？于是就有了我们现在的主流，根据对象的存活年龄来分代。</p><p><img src="/images/qiniu/2020-04-06-21-46-15.png" alt="2020-04-06-21-46-15"></p><p>对图中的几个区域做下说明：</p><p>virtual：在初始化的时候会预留一块内存区域，这个区域除非是必要时候，不然不会分配实际物理内存；<br>Eden 区：年轻代中的 eden 区，对象开始分配空间的主区域，young gc 的主区域；<br>s0：年轻代中的幸存者区域之一，结合我们说的复制算法，eden 区的内存复制到这里；<br>s1：年轻代中的幸存者区域之一，跟 s0 的作用一样；<br>Tenured：永久代/老年代，存放幸存者达到一定年龄的对象；</p><blockquote><p>空间比：Eden:s0:s1 = 8:1:1</p></blockquote><p>这里需要说明一下 s0,s1 两个区域，这两个区域的作用不仅仅是将 eden 区存活的幸存对象复制保存下来，他们自己本身也会进行 gc，比如 s0 里面满了，那么下次年轻代 gc (又叫minor gc)的时候，s0 中存活的对象复制到 s1 中；再下次年轻代 gc 的时候，s1 又把自己本身存活的对象复制到 s0 中，这样每经过一次 minor gc，对象的年龄就+1，达到我们设定的阈值比如 15，就会进入到永久代。</p><h2 id="GC-过程"><a href="#GC-过程" class="headerlink" title="GC 过程"></a>GC 过程</h2><h3 id="minor-GC"><a href="#minor-GC" class="headerlink" title="minor GC"></a>minor GC</h3><p>我们看下一个对象的从创建到最后升级到永久代的过程(多次的 minorGC)：</p><ol><li>先在 eden 区创建一个对象：</li></ol><p><img src="/images/qiniu/2020-04-06-22-09-02.png" alt="2020-04-06-22-09-02"></p><ol start="2"><li>Eden 区要满了，准备触发 minorGC：</li></ol><p><img src="/images/qiniu/2020-04-06-22-09-53.png" alt="2020-04-06-22-09-53"></p><ol start="3"><li>触发一次 minorGC 将 eden 区的一部分存活对象移动到 s0 中：</li></ol><p><img src="/images/qiniu/object-minor-gc-1.gif" alt="object-minor-gc-1"></p><ol start="4"><li>触发下一次 minorGC，将其一定到另一个 s1 中：</li></ol><p><img src="/images/qiniu/object-minor-gc-2.gif" alt="object-minor-gc-2"></p><ol start="5"><li>如果到了我们设定的阈值，就晋升到永久代：</li></ol><p><img src="/images/qiniu/object-minor-gc-3.gif" alt="object-minor-gc-3"></p><p>如果有一个对象需要大量的连续内存时，这种特殊情况下对象的创建不会在 Eden 区，而是直接在老年代。因为如果放在 eden 区，minorGC 进入到 s0、s1 会导致这块很快就空间满了，空间满了就会又开始 gc，那不是费时费力吗，所以直接放到老年代。</p><h3 id="Major-GC-Full-GC"><a href="#Major-GC-Full-GC" class="headerlink" title="Major GC(Full GC)"></a>Major GC(Full GC)</h3><p>上面讲的是 minorGC，那么我们可以想一下，如果在对象到了我们设定的阈值，需要进入永久代了，我们是不是应该要先检查下当前永久代代的空间是不是还够年轻代进行 minorGC？这个叫做空间分配保障。那么怎么保障？如果当前永久代剩余空间大于年轻代的总空间，那肯定没问题，你 minorGC 继续。如果发现当前空间小与年轻代总空间，虚拟机会去查一下HandlePromotionFailure是否允许担保。如果设置为允许，那么怎么办？虚拟机按照以前的 minorGC 晋升到永久代的平均大小，如果大，就 minorGC，如果小就进行 FullGC。</p><p>如果永久代也满了，那么 FullGC 肯定也会触发了。</p><p>FullGC 的过程是堆整个堆进行全量 GC，同时回收年轻代和永久代，会导致一个STW（Stop The World），很好理解啊，我都要进行全家大扫除了，你给我说，你还要继续嗑瓜子？？</p><p>好了，今天写到这里，前面讲了内存区域，今天讲了垃圾标识和常见的算法。明天继续写安全点和常见的几个垃圾收集器。之后再写 GC 日志分析，发生 OOM 线上怎么调试。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;查漏补缺-Java-系列-JVM-垃圾回收&quot;&gt;&lt;a href=&quot;#查漏补缺-Java-系列-JVM-垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;查漏补缺 Java 系列 - JVM 垃圾回收&quot;&gt;&lt;/a&gt;查漏补缺 Java 系列 - JVM 垃圾回收&lt;/h1&gt;&lt;p&gt;正如一间房子，房子的主人肯定需要在客人来的时候进行一些收拾，让家里显得更加的大，而让客人有更好的体验。JVM 也是一样，你想想，JVM 是不是也要不定时的清理下内存区域空间以便能让更多的线程有更好的执行体验？那主人在进行清理的时候，至少要知道要对哪个区域进行清理吧？要知道在哪个区域清理哪些垃圾吧？清理的过程是用拖把还是用扫把，要有个选择吧？你想想 JVM 是不是也应该是类似的？&lt;/p&gt;
&lt;h2 id=&quot;JVM-应该回收哪个区域的垃圾？&quot;&gt;&lt;a href=&quot;#JVM-应该回收哪个区域的垃圾？&quot; class=&quot;headerlink&quot; title=&quot;JVM 应该回收哪个区域的垃圾？&quot;&gt;&lt;/a&gt;JVM 应该回收哪个区域的垃圾？&lt;/h2&gt;&lt;p&gt;上一篇，我们介绍了 jvm 中一些基础概念，包括运行时内存区域。其中我们知道 jvm 规范中规定了5个运行时区域，一器两栈一堆一区。程序计数器，Java 虚拟机栈，本地方法栈，堆，方法区【运行时常量池（方法区内部）】；&lt;/p&gt;
&lt;p&gt;JVM 这些区域里面我们可以分两类，一类需要重点关注 GC，一点可以不需要 GC。根据它们的生命周期可以看到虚拟机栈、本地方法栈、程序计数器这三个线程私有的区域，他们的生命周期跟线程的生命周期保持一样，他们的内存分配和回收时间是可以确定的，所以基本上用不上 GC；而方法区，堆他们需要在程序实际运行时才能知道需要创建哪些对象分配多大的空间，所以这部分是重点要关注的 GC 区域；&lt;/p&gt;
&lt;p&gt;我们根据分配的时机来确定了需要进行垃圾回收的两个区域：堆，方法区。但是在 jvm 规范中对方法区进行了一个定义，也就是这块区域逻辑上属于堆，但是它可以不用 GC（上篇文章我有说到）。因此我们将重点放到堆（Heap）的回收中。&lt;/p&gt;
&lt;p&gt;好了，我们现在知道哪个区域需要进行 GC 了，那么 JVM 又如何知道哪些是垃圾需要清理，哪些不是垃圾不需要清理了？因为堆主要是用来存放对象的，我们也可以当做，jvm 应该怎么判读一个对象是不是应该被回收？&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
    <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>查漏补缺 Java 系列 - JVM 基础概念</title>
    <link href="http://chenzhijun.me/2020/04/04/what-is-jvm-when-we-talk-about-it/"/>
    <id>http://chenzhijun.me/2020/04/04/what-is-jvm-when-we-talk-about-it/</id>
    <published>2020-04-04T07:15:49.000Z</published>
    <updated>2020-05-12T04:56:03.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查漏补缺-Java-系列-JVM"><a href="#查漏补缺-Java-系列-JVM" class="headerlink" title="查漏补缺 Java 系列 - JVM"></a>查漏补缺 Java 系列 - JVM</h1><p>你知道 JVM 吗?作为Java开发人员，我想你肯定听过吧?那么你了解为什么需要 JVM 吗?它的作用是什么?给我带来了什么好处，又给我们带来了什么缺点了?接下来我们一起看看吧。</p><h2 id="JVM-的基础概念"><a href="#JVM-的基础概念" class="headerlink" title="JVM 的基础概念"></a>JVM 的基础概念</h2><p>什么是 JVM ? </p><p>JVM(Java Virtual Machine) 中文名称为 Java 虚拟机。它的作用是为 Java 提供跨平台运行的基础，也就是那句”一次编译，到处运行”的底层保证。 </p><p>我想你肯定在 windows，Linux，MacOS 上都有运行过 Java 程序，那么你想一想，在一台裸机上面(指新买的机器装上一个纯的干净的系统 OS)，你直接编写一个 Main。java 能运行起来么?运行一个 Main。java，我想你肯定经过这几个步骤:安装 jdk(jre) -&gt; 编写 Main。java -&gt; <code>javac Main。java</code>生成<code>main。claas</code>文件 -&gt; <code>java Main</code>;那你想过吗?为什么你要安装一个 jkd(jre)，为什么你要先用<code>javac</code>命令，生成一个<code>claas</code>文件，然后才能执行了?</p><p>你肯定有疑问。是的。我想跟你说的是其实 jvm 根本不知道你写的 java 文件里面的内容，一点都不知道。但是它认识你按照它的规范生成的 class 文件。然后它再将 class 文件翻译成机器识别的机器码。这样才能真正的运行你的程序了。也许这就是为什么很多人会说它是解释器吧。</p><span id="more"></span><h2 id="JVM-都含有什么"><a href="#JVM-都含有什么" class="headerlink" title="JVM 都含有什么?"></a>JVM 都含有什么?</h2><p>我们知道 java 代码要在 jvm 里面运行的话，上面的概念解释中也说了，它需要由 java 编译器生成 class 字节码文件，然后再由 jvm 将字节码 class 文件翻译成底层不同的平台所能识别的机器码。那么在读取到解释成为字节码的过程中，它肯定需要进行一些操作，它进行操作肯定也就避免不了要使用一些工具（或者我们称之为资源）。它要用到的资源就是内存。就像我们住在自己的房子里面一样，我们肯定会要定下来，哪里是我们的卧室，哪里是我们的厨房，哪里是我们的客厅，哪个地方是书房等等。JVM 也是一样。JVM 将它所管理的内存分为了几个运行时数据区域。那么 JVM 有哪几个区域呢？看 <a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.5">Run-Time Data Areas</a> 总共是 5 个运行时数据区：程序计数器（PC register），Java 虚拟机栈（Java Virtual Machine Stacks），堆（Heap），方法区（Method Area），运行时常量池（Run-Time Constant Pool），本地方法栈（Native Method Stacks）。</p><ol><li><p>程序计数器（PC register）：线程私有；jvm 中每一个线程都会有的一块区域，如果是非本地方法（not native thread）的线程，会保存一个当前指令的执行地址；如果是本地方法的线程（native thread）,这个位置就为空（undefined）；这块的空间足够大，大到足够支持所有的指令地址和本地方法指针，所以这块不会出现 OOM 的时候。（原话：The Java Virtual Machine’s pc register is wide enough to hold a returnAddress or a native pointer on the specific platform.）</p></li><li><p>Java 虚拟机栈（Java Virtual Machine Stacks）：线程私有；每个线程创建的时候同步创建这块区域与线程的生命周期相同；它的主要主要作用是用来存储<a href="https://docs.oracle.com/javase/specs/jvms/se14/html/jvms-2.html#jvms-2.6">栈帧</a>（Frame）；它存储局部变量，操作数栈，动态链接，方法调用，方法返回值等信息；Java 虚拟机栈的空间分配可以是不连续的一段内存空间；jvm 规范规定这块的空间可以是固定大小，也可以是动态的大小，由具体的虚拟机实现。在 Java 虚拟机栈中，如果一个运行中的线程请求比 jvm 允许的栈大小更大的空间，jvm 就会直接抛出<code>StackOverflowError</code>；如果是动态扩容机制，当本地内存不足的时候，会抛出<code>OutOfMemoryError</code>。</p></li><li><p>堆（Heap）：是一块线程共享的区域，在 java 虚拟机启动的时候就会被创建，主要作用是用来储存对象实例和数组。这块区域可以被垃圾回收器回收，如果需要的资源比垃圾回收期回收后释放出来的资源还要大，那它就会抛出<code>OutOfMemoryError</code>。实际上，这块区域可以设置为动态扩缩容，应该提供设置最大堆内存和最小堆内存的方法。这块区域的空间申请可以是不连续的空间。</p></li><li><p>方法区（Method Area）：方法区是一个线程共享区域，在 java 虚拟机启动的时候会被创建，主要用来存储每个类的结构，比如说类信息，常量，静态变量，方法和构造方法等。逻辑上它是堆（Heap）的一个区域，但是简单实现它可以不需要使用垃圾回收期回收它。如果需要动态调节它的大小，应该提供最大空间和最小空间的设定方法。如果方法区的内存不够分配了，应该要抛出<code>OutOfMemoryError</code>异常。</p></li><li><p>运行时常量池（Run-Time Constant Pool）：属于方法区的一部分，在类或者接口创建的时候生成，主要用来存储编译期间的各种字面量和符号引用。运行时常量池对于 Class 文件有动态性，不要求常量一定只有编译期才能产生，也可以在运行期加入新的常量，比如使用 String.intern（）方法。如果该区的空间不够，那么就会跟方法区一样抛出<code>OutOfMemoryError</code>异常。</p></li><li><p>本地方法栈（Native Method Stacks）：这个有点类似于 Java 虚拟机栈，虚拟机栈是为执行 Java 方法服务，本地方法栈则为调用 native 方法服务，也会抛出<code>StackOverflowError</code>,<code>OutOfMemoryError</code>异常。</p></li><li><p>直接内存/堆外内存：我在官网的介绍中其实并没有看到这个，但是我看书（《深入理解 Java 虚拟机上》）里面介绍，就一起放到这里了。这块的空间其实就是系统内存中除了分配给 jvm 那些数据区域的，剩下的内存。这块的空间受限于机器本身的内存总大小。这块的作用其实就类似于 NIO 中的 channel 直接操作 Native 函数库直接分配堆外内存。</p></li></ol><blockquote><p>ps 方法区很多人也叫永久代（permanent Generation），本质上两者并不等价，这只是 hotspot 虚拟机的一种具体实现而已，用永久代来实现方法区。书是基于 jdk1.7 的，1.8 中 PermGen 已经被去掉了<a href="https://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html">whats-new-on-jdk-8</a>。</p></blockquote><p>现在你知道了上面定义的 6 个内存 jvm 运行区域，但是在各家的 jvm 虚拟机实现中有点不同。比如 HotSpot，其实我们可以看到只要有上面的规定的 6 个运行时区就行了，毕竟这是规范，具体实现肯定不同：</p><p><img src="/images/qiniu/2020-04-04-23-12-46.png" alt="2020-04-04-23-12-46"></p><p>了解这么多的内存区域，那么它是怎么识别一个对象是否应该被回收？怎么回收空间的了？用到了什么算法？<br>明天继续！</p><p>参考资料：</p><p><a href="https://blog.csdn.net/zhenghongcs/article/details/104628800">jvm</a></p><p><a href="https://docs.oracle.com/javase/specs/index.html">Java Language and Virtual Machine Specifications</a></p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html">gc 调优-官网文档</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;查漏补缺-Java-系列-JVM&quot;&gt;&lt;a href=&quot;#查漏补缺-Java-系列-JVM&quot; class=&quot;headerlink&quot; title=&quot;查漏补缺 Java 系列 - JVM&quot;&gt;&lt;/a&gt;查漏补缺 Java 系列 - JVM&lt;/h1&gt;&lt;p&gt;你知道 JVM 吗?作为Java开发人员，我想你肯定听过吧?那么你了解为什么需要 JVM 吗?它的作用是什么?给我带来了什么好处，又给我们带来了什么缺点了?接下来我们一起看看吧。&lt;/p&gt;
&lt;h2 id=&quot;JVM-的基础概念&quot;&gt;&lt;a href=&quot;#JVM-的基础概念&quot; class=&quot;headerlink&quot; title=&quot;JVM 的基础概念&quot;&gt;&lt;/a&gt;JVM 的基础概念&lt;/h2&gt;&lt;p&gt;什么是 JVM ? &lt;/p&gt;
&lt;p&gt;JVM(Java Virtual Machine) 中文名称为 Java 虚拟机。它的作用是为 Java 提供跨平台运行的基础，也就是那句”一次编译，到处运行”的底层保证。 &lt;/p&gt;
&lt;p&gt;我想你肯定在 windows，Linux，MacOS 上都有运行过 Java 程序，那么你想一想，在一台裸机上面(指新买的机器装上一个纯的干净的系统 OS)，你直接编写一个 Main。java 能运行起来么?运行一个 Main。java，我想你肯定经过这几个步骤:安装 jdk(jre) -&amp;gt; 编写 Main。java -&amp;gt; &lt;code&gt;javac Main。java&lt;/code&gt;生成&lt;code&gt;main。claas&lt;/code&gt;文件 -&amp;gt; &lt;code&gt;java Main&lt;/code&gt;;那你想过吗?为什么你要安装一个 jkd(jre)，为什么你要先用&lt;code&gt;javac&lt;/code&gt;命令，生成一个&lt;code&gt;claas&lt;/code&gt;文件，然后才能执行了?&lt;/p&gt;
&lt;p&gt;你肯定有疑问。是的。我想跟你说的是其实 jvm 根本不知道你写的 java 文件里面的内容，一点都不知道。但是它认识你按照它的规范生成的 class 文件。然后它再将 class 文件翻译成机器识别的机器码。这样才能真正的运行你的程序了。也许这就是为什么很多人会说它是解释器吧。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
    <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java HashMap</title>
    <link href="http://chenzhijun.me/2020/03/25/java-map-hashmap-concurrenthashmap/"/>
    <id>http://chenzhijun.me/2020/03/25/java-map-hashmap-concurrenthashmap/</id>
    <published>2020-03-25T14:57:59.000Z</published>
    <updated>2020-05-12T05:34:32.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap-介绍"><a href="#HashMap-介绍" class="headerlink" title="HashMap 介绍"></a>HashMap 介绍</h1><p>这个该怎么写了？其实网上好多博客说了这个，其实我看了之后，甚至看了源码之后我也不知道怎么写，源码中Hashmap的介绍大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hashmap 大致是等于hashtable的，除了非同步和允许null值之外；</span><br><span class="line">不保证数据的顺序；</span><br><span class="line">常数级别的get和put；</span><br><span class="line">最重要性能的两个属性： capacity  ， loadfactor</span><br><span class="line">0.75的加载因子数是一种空间和时间上的tradeoff（平衡）</span><br><span class="line">相同的hashcode()会降低它的性能</span><br><span class="line">hashmap的实现是非同步的；</span><br><span class="line">iterator fail-fast ConcurrentModificationException.</span><br></pre></td></tr></table></figure><p>首先我们介绍下它的内部数据结构吧。</p><h2 id="HashMap的内部结构"><a href="#HashMap的内部结构" class="headerlink" title="HashMap的内部结构"></a>HashMap的内部结构</h2><span id="more"></span><p>Hashmap 是由<code>Node&lt;K,V&gt;[] table</code>和链表组成的结构，数组被分为一个个的桶（bucket），通过 hash 值在这个桶上进行寻址。hash 值相同的键值对就以链表的形式存储，如果链表的大小超过 <code>TREEIFY_THRESHOLD=8</code>就会将链表进行树化。</p><p><img src="/images/qiniu/2020-03-26-22-27-21.png" alt="2020-03-26-22-27-21"></p><p>接下来我们看看它的一个初始化方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 new 一个 hashmap 的时候会发现，<code>Node&lt;K,V&gt;[] table;</code> table 就没有设值。</p><p>然后我么来看一个 put 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">       <span class="comment">// 开始进行resize()保证桶的容量； </span></span><br><span class="line">       <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">           n = (tab = resize()).length;</span><br><span class="line">       <span class="comment">//i = (n - 1) &amp; hash 是不是最后一个桶，并且为null</span></span><br><span class="line">       <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">       <span class="comment">//直接加到tab后面</span></span><br><span class="line">           tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           Node&lt;K,V&gt; e; K k;</span><br><span class="line">           <span class="comment">//</span></span><br><span class="line">           <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               e = p;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">               e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                   <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                       <span class="comment">// 进行树化</span></span><br><span class="line">                       <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                           treeifyBin(tab, hash);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   p = e;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">               V oldValue = e.value;</span><br><span class="line">               <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                   e.value = value;</span><br><span class="line">               afterNodeAccess(e);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       ++modCount;</span><br><span class="line">       <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">           resize();</span><br><span class="line">       afterNodeInsertion(evict);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>总的一个put流程大致就是： 初始化或者 resize() 扩容和树化；</p><p>现在我们看看 resize() 方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">       <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">       <span class="keyword">int</span> oldThr = threshold;<span class="comment">//threshold=capacity * load factor</span></span><br><span class="line">       <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">//是否超过最大值 MAXIMUM_CAPACITY = 1 &lt;&lt; 30; 2 的 30 次方</span></span><br><span class="line">           <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">               threshold = Integer.MAX_VALUE;</span><br><span class="line">               <span class="keyword">return</span> oldTab;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//两倍扩容</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">               newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">           newCap = oldThr;</span><br><span class="line">       <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">       <span class="comment">// 桶的容量默认值： DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4； 默认值 16；</span></span><br><span class="line">           newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">       <span class="comment">// 桶扩容的阀值：</span></span><br><span class="line">           newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">           newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                     (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//设置扩容的阀值</span></span><br><span class="line">       threshold = newThr;</span><br><span class="line">       <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">       <span class="comment">//如果原来的桶中不为null，扩容后要把桶中的数据迁移到新桶中。</span></span><br><span class="line">       Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">       table = newTab;</span><br><span class="line">       <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">               Node&lt;K,V&gt; e;</span><br><span class="line">               <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                   <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                       newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                       ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                   <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                      <span class="comment">// 会讲原来的一个链条打散成两条链</span></span><br><span class="line">                       Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                       Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                       Node&lt;K,V&gt; next;</span><br><span class="line">                       <span class="keyword">do</span> &#123;</span><br><span class="line">                           <span class="comment">//这里也就是会在高并发下导致hashmap出现问题的原因</span></span><br><span class="line">                           next = e.next;</span><br><span class="line">                           <span class="comment">//这里的 e.hash &amp; oldCap ==0 可以有效避免重复计算hash值，而且把原来的桶中重复的值分散到新的桶中。</span></span><br><span class="line">                           <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                               <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                   loHead = e;</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   loTail.next = e;</span><br><span class="line">                               loTail = e;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">else</span> &#123;</span><br><span class="line">                               <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                   hiHead = e;</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   hiTail.next = e;</span><br><span class="line">                               hiTail = e;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                       <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                           newTab[j] = loHead;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                           newTab[j + oldCap] = hiHead;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> newTab;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>看完 resize 就会发现发现它做了很多事，初始化，扩容，数据复制；数据复制也会造成一定的开销。<br>另外resize中的防止rehash并且分散之前的冲突节点的算法也很巧妙：<br><img src="/images/qiniu/2020-03-27-23-13-43.png" alt="2020-03-27-23-13-43"></p><p>另外我们看下树化：<code>treeifyBin(tab, hash);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="comment">//如果是空桶或者桶里面的数据少于 MIN_TREEIFY_CAPACITY = 64;只是简单扩容就行了。</span></span><br><span class="line">       <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">           resize();</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">do</span> &#123;</span><br><span class="line">               TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">               <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                   hd = p;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                   p.prev = tl;</span><br><span class="line">                   tl.next = p;</span><br><span class="line">               &#125;</span><br><span class="line">               tl = p;</span><br><span class="line">           &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">               hd.treeify(tab);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>所以可以看到 HashMap 的 <code>LOAD_FACTOR</code> 加载因子和容量是多么的重要了。我们一般的化可以优化为：<br><code>负载因子 * 容量 &gt; 元素数量</code> 即初始化容量时候，值要大于“预估元素数量 / 负载因子” </p><p>hashmap在高并发场景下会发生什么了？<br>要记住，hashmap本身就被声明为了非同步安全的类，如果在多线程环境下是会有可能导致无限循环占用cpu，size不准确，具体的原因可以看下这篇博客 <a href="https://mailinator.blogspot.com/2009/06/beautiful-race-condition.html">a beatiful race condition</a></p><p>那么问一下，为什么要进行树化了？<br>本质上是个安全问题，如果一个对象hash冲突，都被放到一个桶里面，就会形成一个链表，链表的查询是线性的，就会严重影响存储的性能；<br>另外有种安全攻击叫做“哈希碰撞拒绝服务攻击”，就是构建哈希冲突的数据，恶意代码用这些数据与服务器进行交互，导致服务端cpu大量占用。来达到攻击的目录。</p><p>那么，并发下，我们应该怎么使用HashMap了？<br>明天讲～</p><!--但是假如你在面试，面试官会怎么问你了？咳咳，模拟下：Q：你好，请问你们平常用的jdk版本是多少？A：线上主要用的是jdk8Q：那你能介绍下常见的这个HashMap吗？A：balabla 上面一大段Q：1.8中对hashmap有什么优化了？A：在数据存储中引入了树化，在数据超过8的时候就会变成红黑树。Q：为什么要引入树来做存储了？有什么好处了？Q: 能不能介绍下hashmap put的整个过程？Q: 能不能介绍下hashmap的使用场景？Q：高并发的场景下应该怎么办了？ ## 这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题？## 这个技术的优势和劣势分别是什么，或者说，这个技术的 trade-off （要什么不要什么）是什么## 这个技术适用的场景（技术场景或业务场景）## 这个技术的组成部分和关键点（核心思想，核心组件）## 这个技术的底层原理和关键实现## 已有的实现和它之间的对比https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6423457--><p>参考：<a href="https://www.cnblogs.com/Michaelwjw/p/6411176.html">https://www.cnblogs.com/Michaelwjw/p/6411176.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;HashMap-介绍&quot;&gt;&lt;a href=&quot;#HashMap-介绍&quot; class=&quot;headerlink&quot; title=&quot;HashMap 介绍&quot;&gt;&lt;/a&gt;HashMap 介绍&lt;/h1&gt;&lt;p&gt;这个该怎么写了？其实网上好多博客说了这个，其实我看了之后，甚至看了源码之后我也不知道怎么写，源码中Hashmap的介绍大致如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hashmap 大致是等于hashtable的，除了非同步和允许null值之外；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不保证数据的顺序；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;常数级别的get和put；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最重要性能的两个属性： capacity  ， loadfactor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0.75的加载因子数是一种空间和时间上的tradeoff（平衡）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;相同的hashcode()会降低它的性能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hashmap的实现是非同步的；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iterator fail-fast ConcurrentModificationException.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先我们介绍下它的内部数据结构吧。&lt;/p&gt;
&lt;h2 id=&quot;HashMap的内部结构&quot;&gt;&lt;a href=&quot;#HashMap的内部结构&quot; class=&quot;headerlink&quot; title=&quot;HashMap的内部结构&quot;&gt;&lt;/a&gt;HashMap的内部结构&lt;/h2&gt;</summary>
    
    
    
    <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
    <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>查漏补缺 Java 系列 - String，StringBuffer，StringBuilder有什么区别</title>
    <link href="http://chenzhijun.me/2020/03/18/java-string-stringbuffer-stringbuilder/"/>
    <id>http://chenzhijun.me/2020/03/18/java-string-stringbuffer-stringbuilder/</id>
    <published>2020-03-18T15:30:30.000Z</published>
    <updated>2020-05-12T04:56:03.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查漏补缺-Java-系列-String，StringBuffer，StringBuilder有什么区别"><a href="#查漏补缺-Java-系列-String，StringBuffer，StringBuilder有什么区别" class="headerlink" title="查漏补缺 Java 系列 - String，StringBuffer，StringBuilder有什么区别"></a>查漏补缺 Java 系列 - String，StringBuffer，StringBuilder有什么区别</h1><h2 id="String，StringBuffer，StringBuilder-他们三者的优势和劣势？"><a href="#String，StringBuffer，StringBuilder-他们三者的优势和劣势？" class="headerlink" title="String，StringBuffer，StringBuilder 他们三者的优势和劣势？"></a>String，StringBuffer，StringBuilder 他们三者的优势和劣势？</h2><p>一般来说，Java中String是用来对字符串进行操作的类，是一个 Immutable 类，它是被声明为final class，所有的属性也是final的；String中的所有跟字符串修改的方法都是新建了一个String，就会产生很多额外的String对象；</p><p>StringBuffer是一个线程安全的类，它的所有方法都加上了synchronized; StringBuffer还有个优点就是它在执行append的操作的时候将新的字符串插入到原来的串中，可能是末尾，也可能是中间位置；</p><p>StringBuilder 是 Java 1.5 中新增的，它可以看成是StringBuffer的非线程安全实现版本。</p><span id="more"></span><h2 id="String，StringBuffer，StringBuilder-三者的使用场景？"><a href="#String，StringBuffer，StringBuilder-三者的使用场景？" class="headerlink" title="String，StringBuffer，StringBuilder 三者的使用场景？"></a>String，StringBuffer，StringBuilder 三者的使用场景？</h2><p>其实在jdk9开始，如果我们javap String相关的源码会发现，不再有之前的StringBuilder出现了。这是因为在新的jdk9中，采用了一种新的方式：COMPACT_STRINGS 。底层的数据结构用的是 一个bytes数组+coder的方式组建String的内容，用coder来判断是用LATIN1,UTF16。那么很明显了。<br>如果你在jdk8里面，需要线程同步安全的化，可以使用StringBuffer；如果涉及到大量的String操作，可以考虑使用StringBuilder；但是我认为这个还是要根据编码来，编码首先是给人看的，一定要保证可读性。比如下列的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="string">&quot;abc&quot;</span>).append(<span class="string">&quot;def&quot;</span>);<span class="comment">//如果很长了？</span></span><br><span class="line"></span><br><span class="line">String abcdeft=<span class="string">&quot;abc&quot;</span>+<span class="string">&quot;def&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="三者的关键组成部分和关键点？"><a href="#三者的关键组成部分和关键点？" class="headerlink" title="三者的关键组成部分和关键点？"></a>三者的关键组成部分和关键点？</h2><blockquote><p>ps: jdk8中用的是数组char；jdk9+中用的是数组byte；</p></blockquote><h2 id="三者的底层原理和关键实践"><a href="#三者的底层原理和关键实践" class="headerlink" title="三者的底层原理和关键实践"></a>三者的底层原理和关键实践</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;查漏补缺-Java-系列-String，StringBuffer，StringBuilder有什么区别&quot;&gt;&lt;a href=&quot;#查漏补缺-Java-系列-String，StringBuffer，StringBuilder有什么区别&quot; class=&quot;headerlink&quot; title=&quot;查漏补缺 Java 系列 - String，StringBuffer，StringBuilder有什么区别&quot;&gt;&lt;/a&gt;查漏补缺 Java 系列 - String，StringBuffer，StringBuilder有什么区别&lt;/h1&gt;&lt;h2 id=&quot;String，StringBuffer，StringBuilder-他们三者的优势和劣势？&quot;&gt;&lt;a href=&quot;#String，StringBuffer，StringBuilder-他们三者的优势和劣势？&quot; class=&quot;headerlink&quot; title=&quot;String，StringBuffer，StringBuilder 他们三者的优势和劣势？&quot;&gt;&lt;/a&gt;String，StringBuffer，StringBuilder 他们三者的优势和劣势？&lt;/h2&gt;&lt;p&gt;一般来说，Java中String是用来对字符串进行操作的类，是一个 Immutable 类，它是被声明为final class，所有的属性也是final的；String中的所有跟字符串修改的方法都是新建了一个String，就会产生很多额外的String对象；&lt;/p&gt;
&lt;p&gt;StringBuffer是一个线程安全的类，它的所有方法都加上了synchronized; StringBuffer还有个优点就是它在执行append的操作的时候将新的字符串插入到原来的串中，可能是末尾，也可能是中间位置；&lt;/p&gt;
&lt;p&gt;StringBuilder 是 Java 1.5 中新增的，它可以看成是StringBuffer的非线程安全实现版本。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://chenzhijun.me/categories/Java/"/>
    
    
    <category term="Java" scheme="http://chenzhijun.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>shell-operation</title>
    <link href="http://chenzhijun.me/2019/12/18/shell-operation/"/>
    <id>http://chenzhijun.me/2019/12/18/shell-operation/</id>
    <published>2019-12-18T14:03:57.000Z</published>
    <updated>2020-05-12T04:56:03.925Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx-http-1.1</title>
    <link href="http://chenzhijun.me/2019/12/18/nginx-http-1-1/"/>
    <id>http://chenzhijun.me/2019/12/18/nginx-http-1-1/</id>
    <published>2019-12-18T13:57:00.000Z</published>
    <updated>2020-05-12T04:56:03.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-Http-1-1-Host规范"><a href="#Nginx-Http-1-1-Host规范" class="headerlink" title="Nginx Http 1.1 Host规范"></a>Nginx Http 1.1 Host规范</h1><p>最近发现一个异常问题。一个web服务挂载在nginx后端，然后client通过socket连接后，构建成http-post请求，发现最后nginx会直接返回499，发现其实是客户端断链接，其实应该不对。<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ignore_client_abort">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ignore_client_abort</a></p><p>之后的是http1.1的规范。<a href="https://tools.ietf.org/html/rfc2616#section-14.23">https://tools.ietf.org/html/rfc2616#section-14.23</a> http1.1中，如果Host为空会直接返回400的状态码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nginx-Http-1-1-Host规范&quot;&gt;&lt;a href=&quot;#Nginx-Http-1-1-Host规范&quot; class=&quot;headerlink&quot; title=&quot;Nginx Http 1.1 Host规范&quot;&gt;&lt;/a&gt;Nginx Http 1.1 Host规范&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ops 操作手册</title>
    <link href="http://chenzhijun.me/2019/12/01/kubernetes-tips/"/>
    <id>http://chenzhijun.me/2019/12/01/kubernetes-tips/</id>
    <published>2019-12-01T10:09:17.000Z</published>
    <updated>2020-05-12T04:56:03.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="给命令行增加快捷操作提示符"><a href="#给命令行增加快捷操作提示符" class="headerlink" title="给命令行增加快捷操作提示符"></a>给命令行增加快捷操作提示符</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source &lt;(kubectl completion bash) # setup autocomplete in bash into the current shell, bash-completion package should be installed first.echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc # add autocomplete permanently to your bash shell.</span><br><span class="line">alias k=kubectl</span><br><span class="line">complete -F __start_kubectl k</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="快速删除kubernetes资源"><a href="#快速删除kubernetes资源" class="headerlink" title="快速删除kubernetes资源"></a>快速删除kubernetes资源</h2><p>删除Terminating的pods</p><p><code>kubectl get pods --all-namespaces|grep Termi|awk &#39;&#123;print &quot;kubectl -n &quot;$1&quot; delete pods &quot;$2&quot; --force --grace-period=0&quot;&#125;&#39;|xargs -i echo &#123;&#125; &gt;delete.sh</code></p><p>缩容：</p><p><code>kcc scale --current-replicas=3 --replicas=0 deployment/orche</code></p><p>禁止主机调度：</p><p><code>kubectl uncordon NODE_NAME</code></p><p>显示节点ip：</p><p><code>kubectl get nodes -o wide --show-labels|awk &#39;&#123;print $1&quot;\t&quot;$2&quot;\t&quot;$6&#125;&#39;</code></p><p>删除标签：</p><p> <code>kubectl label node cnsz12.company.cn bad-</code></p><p>快速启动一个容器：</p><p> <code>kc run -i --tty --image harbor.com/library/busybox:1.28.4 dns-test --restart=Never --rm /bin/sh</code></p><h2 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">https://github.com/buger/goreplay</span><br><span class="line"></span><br><span class="line">./gor --input-raw :8080 --input-raw-track-response --output-stdout</span><br><span class="line"></span><br><span class="line">./gor --input-raw :8080 --output-stdout --http-allow-url RH_SSO/SeqSso.sso</span><br><span class="line"></span><br><span class="line">tcpdump -i eth0 dst host 10.70.1.76 and dst port 4410</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文件底层无法编辑"><a href="#文件底层无法编辑" class="headerlink" title="文件底层无法编辑"></a>文件底层无法编辑</h2><p>chattr</p><h2 id="docker-容器网络工具镜像"><a href="#docker-容器网络工具镜像" class="headerlink" title="docker 容器网络工具镜像"></a>docker 容器网络工具镜像</h2><p><code>docker run -ti --net container:a967 nicolaka/netshoot:latest bash</code></p><!--jdk8u202之后，jvm获取cgroup的内存限制。kubectl get pods --all-namespaces|grep Termi|awk '{print "kubectl -n "$1" delete pods "$2" --force --grace-period=0"}'|xargs -i echo {} >delete.sh网络模型：ovs open vswitch ,daemonset启动openshift本身使用static podfind /sys/fs/cgroup/memory -type d | wc -lThe node was low on resource: memory. Container rdspm-app was using 2159200Ki, which exceeds its request of 0https://www.cnblogs.com/duanxz/p/10247494.htmlhttps://blog.csdn.net/weixin_33744141/article/details/86251459find . -amin -10 # 查找在系统中最后10分钟访问的文件find . -atime -2 # 查找在系统中最后48小时访问的文件find . -empty # 查找在系统中为空的文件或者文件夹find . -group cat # 查找在系统中属于 groupcat的文件find . -mmin -5 # 查找在系统中最后5分钟里修改过的文件find . -mtime -1 #查找在1天以内修改过的文件find . -mtime +7 #查找在7天以外修改过的文件find . -nouser #查找在系统中属于作废用户的文件find . -user fred #查找在系统中属于FRED这个用户的文件find . -type -f # 查找文件类型为普通文件的文件nginx 会话粘贴http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalivehttps://stackoverflow.com/questions/24453388/nginx-reverse-proxy-causing-504-gateway-timeouthttps://superuser.com/questions/1489355/website-shows-a-blank-page-when-opened-from-search-engines-or-href-links-but-wo应用频繁启动，导致k8s node节点not ready100.70.88.44PLEG unhealth   https://github.com/kubernetes/kubernetes/issues/45419https://github.com/kubernetes/kubernetes/issues/61117CREATE USER 'monitor'@'100.69.224.39' IDENTIFIED BY 'monitor1875' WITH MAX_USER_CONNECTIONS 3;GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'monitor'@'100.69.224.39';GRANT SELECT ON performance_schema.* TO 'monitor'@'100.69.224.39';go modhaproxy 支持websocketsed -i '/120/d’ known_hosts 替换120的行sed -n ‘/120/p' known_hosts  查找ruby的行git log --graph --pretty=oneline --abbrev-commitControl a 最开始，control e 最末尾nodeport,hostport-->]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;给命令行增加快捷操作提示符&quot;&gt;&lt;a href=&quot;#给命令行增加快捷操作提示符&quot; class=&quot;headerlink&quot; title=&quot;给命令行增加快捷操作提示符&quot;&gt;&lt;/a&gt;给命令行增加快捷操作提示符&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source &amp;lt;(kubectl completion bash) # setup autocomplete in bash into the current shell, bash-completion package should be installed first.echo &amp;quot;source &amp;lt;(kubectl completion bash)&amp;quot; &amp;gt;&amp;gt; ~/.bashrc # add autocomplete permanently to your bash shell.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias k=kubectl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;complete -F __start_kubectl k&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>基础排序算法</title>
    <link href="http://chenzhijun.me/2019/09/13/datastruct-normal-sort-algorithm2/"/>
    <id>http://chenzhijun.me/2019/09/13/datastruct-normal-sort-algorithm2/</id>
    <published>2019-09-13T11:14:07.000Z</published>
    <updated>2020-05-12T04:56:03.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础排序算法2"><a href="#基础排序算法2" class="headerlink" title="基础排序算法2"></a>基础排序算法2</h1><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序的意义是将利用递归的思想，将一个大问题解决为可重复求解的小问题，最后合并这些小问题得出结果。<br>归并是直接数组对半分，分成两个子数组。然后对两个子数组再进行排序求解。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序：对半分成两个子数组，然后子数组再向下分，之后合并数组。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">3</span> / <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="number">1</span> / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        mergeSort2(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        mergeSort(a, 0, a.length - 1);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort2</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> middle = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        mergeSort2(arr, start, middle);</span><br><span class="line">        mergeSort2(arr, middle + <span class="number">1</span>, end);</span><br><span class="line">        merge2(arr, start, middle, end);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge2</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> middle, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用来存储的临时数组</span></span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[end - start + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//p q 两个指针，遍历arr</span></span><br><span class="line">        <span class="keyword">int</span> p = start;</span><br><span class="line">        <span class="keyword">int</span> q = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//[0 , middle] 和 [middle+1 , end] 的数据分别赋值给新数组</span></span><br><span class="line">        <span class="keyword">while</span> (p &lt;= middle &amp;&amp; q &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[p] &lt;= arr[q]) &#123;</span><br><span class="line">                newArr[i++] = arr[p++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newArr[i++] = arr[q++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断两边谁还有剩余的数</span></span><br><span class="line">        <span class="comment">//1 假设左边有剩余的数</span></span><br><span class="line">        <span class="keyword">int</span> p1 = p;</span><br><span class="line">        <span class="keyword">int</span> q1 = middle;</span><br><span class="line">        <span class="comment">//2 判断是不是左边真的有剩余，下面的if可以判断出右边是不是有剩余，while中只会有一边清空时才会退出while</span></span><br><span class="line">        <span class="keyword">if</span> (q &lt;= end) &#123;</span><br><span class="line">            p1 = q;</span><br><span class="line">            q1 = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将剩余的数填满新数组</span></span><br><span class="line">        <span class="keyword">while</span> (p1 &lt;= q1) &#123;</span><br><span class="line">            newArr[i++] = arr[p1++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将新数组（已排序）的值替换老数组的位置</span></span><br><span class="line">        <span class="comment">//这里要注意start-end之间的个数其实就是newArr数组的个数为end-start , 所以这里只能让idx最大为end-start 也相当于为循环end-start次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt;= end - start; idx++) &#123;</span><br><span class="line">            arr[idx + start] = newArr[idx];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> q = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(arr, start, q);</span><br><span class="line">        mergeSort(arr, q + <span class="number">1</span>, end);</span><br><span class="line">        merge(arr, start, q, end);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> middle, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] tmps = <span class="keyword">new</span> <span class="keyword">int</span>[end - start + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> p = start;</span><br><span class="line">        <span class="keyword">int</span> q = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &lt;= middle &amp;&amp; q &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[p] &lt;= arr[q]) &#123;</span><br><span class="line">                tmps[i] = arr[p];</span><br><span class="line">                p++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmps[i] = arr[q];</span><br><span class="line">                q++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i1 = p;</span><br><span class="line">        <span class="keyword">int</span> j1 = middle;</span><br><span class="line">        <span class="keyword">if</span> (q &lt;= end) &#123;</span><br><span class="line">            i1 = q;</span><br><span class="line">            j1 = end;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i1 &lt;= j1) &#123;</span><br><span class="line">            tmps[i] = arr[i1];</span><br><span class="line">            i1++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= end - start; ++j) &#123;</span><br><span class="line">            arr[start + j] = tmps[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>也是归并排序的一种，不过快排采用的是先分区，再归并。快排采用的是找一个基准点，然后比较数组中数据的基准点找出分割点，以分割点来割分子数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快排序的思想就是,同一个数组,不需要额外的空间,</span></span><br><span class="line"><span class="comment"> * 最重要的部分是找出每个数据的应该放置的位置，这个位置的左边全小于它，右边全大于它，</span></span><br><span class="line"><span class="comment"> * 它是一个分割点，然后依次类推，每个数据都放到一个这样的位置，数组就拍好顺序了。</span></span><br><span class="line"><span class="comment"> * 快排序：O(nlogn)</span></span><br><span class="line"><span class="comment"> * 空间：O(1)</span></span><br><span class="line"><span class="comment"> * 稳定性：不稳定，因为两两交换嘛。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">3</span> / <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="number">1</span> / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        quickSort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = quickSortN2(arr, start, end);</span><br><span class="line"><span class="comment">//        int n = quickSortN3(arr, start, end);</span></span><br><span class="line">        quickSort(arr, start, n - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, n + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取末尾为参考值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">quickSortN2</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[end];<span class="comment">//要从尾部取这个参照点</span></span><br><span class="line">        <span class="keyword">int</span> p = start;<span class="comment">//定一个指针</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> q = start; q &lt;= end - <span class="number">1</span>; q++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[q] &lt; pivot) &#123;<span class="comment">//将p留在永远大于参考点的第一个位置</span></span><br><span class="line">                swap(arr, p, q);</span><br><span class="line">                p++;<span class="comment">//顺着左移，保持第一个位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**已经遍历完了p的位置，左边是小于参考点的数据，</span></span><br><span class="line"><span class="comment">         右边是大于参考点的数据，p的位置存放参考点，</span></span><br><span class="line"><span class="comment">         该位置就刚好变成了一个分割点。将一个大的分解了两个子问题，</span></span><br><span class="line"><span class="comment">         而子问题也可以重复刚刚的步骤，最后所有的数据都会待在那个最</span></span><br><span class="line"><span class="comment">         合适的位置，最后的顺序也就排列好了。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        swap(arr, p, end);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[p];</span><br><span class="line">        arr[p] = arr[q];</span><br><span class="line">        arr[q] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选第一个为参考值。注意返回的p-1的值</span></span><br><span class="line"><span class="comment">     * 比选最后一个值为参考值多了几次+,-的操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">quickSortN3</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[start];</span><br><span class="line">        <span class="keyword">int</span> p = start + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> q = start + <span class="number">1</span>; q &lt;= end; q++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[q] &lt; pivot) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[q];</span><br><span class="line">                arr[q] = arr[p];</span><br><span class="line">                arr[p] = temp;</span><br><span class="line">                p++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//p的位置是大于参考点的,因此要交换p-1的位置</span></span><br><span class="line">        swap(arr, start, p - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> p - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一版本（错误方法）</span></span><br><span class="line"><span class="comment">     * 有bug，当出现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * [8,1,9,12,6,0]  p=0;q=0</span></span><br><span class="line"><span class="comment">     * a: 1,8,9,12,6,0   p=1;q=1</span></span><br><span class="line"><span class="comment">     * b: 1,6,9,12,8,0   p=2;q=4</span></span><br><span class="line"><span class="comment">     * c: 1,6,0,12,8,9   p=3;q=5</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 这个时候返回p=3,最终的结果肯定不正确。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">quickSortN</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[start];</span><br><span class="line">        <span class="keyword">int</span> p = start;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> q = start; q &lt;= end; q++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[q] &lt; pivot) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[q];</span><br><span class="line">                arr[q] = arr[p];</span><br><span class="line">                arr[p] = temp;</span><br><span class="line">                p++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        arr[p] = pivot;</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>桶排序的一种特殊方式，数据必须是非负整数。桶排序的方式是将数据最小值和最大值均分为多个桶，把数据放到桶里面，然后依次取出桶中的数据。计数排序的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chenzhijun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        countSort(a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数排序就是遍历原始数组A找到最大值，然后以（最大值+1）的长度建立一个新数组B</span></span><br><span class="line"><span class="comment">     * 遍历数组A,每遍历A的一个数据a，在B中a的位置就+1；B[a]=B[a]+1</span></span><br><span class="line"><span class="comment">     * 遍历数组B获取B[a]之前[0-a]的所有数据个数，目前A中已经遍历过一次了，A中的数</span></span><br><span class="line"><span class="comment">     * 据在B中对应的下标中都会有值，统计B中a之前的所有个数，这样我们就能知道A中的数</span></span><br><span class="line"><span class="comment">     * 据a在A数组中应该在哪个位置。B遍历完之后，就相当于知道了a和小于a的所有数据的</span></span><br><span class="line"><span class="comment">     * 个数之和。</span></span><br><span class="line"><span class="comment">     * 新建一个数组C,长度和A一致，我们遍历一下A，取出数据A[i],数据A[i]在C中的位置</span></span><br><span class="line"><span class="comment">     * 应该为在数组B[A[i]]的值，即小于或等于数据A[i]的个数，之后将C[B[A[i]]-1]赋值为A[i]；</span></span><br><span class="line"><span class="comment">     * B[A[i]]为个数</span></span><br><span class="line"><span class="comment">     * B[A[i]]-1为数组实际下边，数组从0开始</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrA</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">int</span>[] arrA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = arrA[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrA.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arrA[i] &gt; max) &#123;</span><br><span class="line">                max = arrA[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arrB = <span class="keyword">new</span> <span class="keyword">int</span>[max + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//第一步是找出相同值的个数，比如数组里面5的数据，有2个，那么newA中第5个位置为2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrA.length; i++) &#123;</span><br><span class="line">            arrB[arrA[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算数组中当前位置的数据有几个，比如数组中5的数据，那么从0-5，总共有多少个数字了？</span></span><br><span class="line">        <span class="comment">// 这个for循环就是计算总共的数字。计算出数字了之后，我们就知道，5在数组中顺序的位置了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arrB.length; i++) &#123;</span><br><span class="line">            arrB[i] = arrB[i] + arrB[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个新数组，长度跟要排序的数组一样，当我们遍历一下要排序数组，取出里面的数据</span></span><br><span class="line">        <span class="comment">//根据取出的值，在newA中下表为值的位置取出个数,就是这个新数组的位置。</span></span><br><span class="line">        <span class="keyword">int</span>[] arrC = <span class="keyword">new</span> <span class="keyword">int</span>[arrA.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrC.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> position = arrB[arrA[i]] - <span class="number">1</span>;<span class="comment">//arrB 里面存储的是个数，在新数组就是位置，减1是因为从0计算嘛，所以减1</span></span><br><span class="line">            arrC[position] = arrA[i];<span class="comment">// position 位置要等于arr[i]，取出了一个值所以就</span></span><br><span class="line">            arrB[arrA[i]]--;<span class="comment">//取出一个数据了，个数就少一个了。</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrA.length; i++) &#123;</span><br><span class="line">            arrA[i] = arrC[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="几种基础排序算法比较"><a href="#几种基础排序算法比较" class="headerlink" title="几种基础排序算法比较"></a>几种基础排序算法比较</h2><p><img src="/images/qiniu/2019-09-13-19-14-25.png" alt="几种基础排序算法比较"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基础排序算法2&quot;&gt;&lt;a href=&quot;#基础排序算法2&quot; class=&quot;headerlink&quot; title=&quot;基础排序算法2&quot;&gt;&lt;/a&gt;基础排序算法2&lt;/h1&gt;&lt;h2 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h2&gt;&lt;p&gt;归并排序的意义是将利用递归的思想，将一个大问题解决为可重复求解的小问题，最后合并这些小问题得出结果。&lt;br&gt;归并是直接数组对半分，分成两个子数组。然后对两个子数组再进行排序求解。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://chenzhijun.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序算法" scheme="http://chenzhijun.me/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>基础排序算法</title>
    <link href="http://chenzhijun.me/2019/09/10/datastruct-normal-sort-algorithm/"/>
    <id>http://chenzhijun.me/2019/09/10/datastruct-normal-sort-algorithm/</id>
    <published>2019-09-10T13:35:29.000Z</published>
    <updated>2020-05-12T04:56:03.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础排序算法"><a href="#基础排序算法" class="headerlink" title="基础排序算法"></a>基础排序算法</h1><p>每次一看算法就是，嗯，看懂了，每次自己写代码就是，嗯？这怎么写？？ 本文将自己理解的冒泡排序，插入排序，选择排序三种做一个总结。</p><span id="more"></span><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序其实很形象，就是每次选最大，或者最小的值，与第一个值交换，逐次冒泡。就像水里面的泡泡，轻的泡泡总会浮起来一样。</p><p>实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubblingSort(<span class="keyword">int</span>[] a) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; a[j]) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">                a[i] = a[j];</span><br><span class="line">                a[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;次:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> an : a) &#123;</span><br><span class="line">            System.err.print(an + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设有原始数组a,每次冒泡的结果就如下，我们这里选的是从大到小冒泡：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第0次:</span><br><span class="line">12157935</span><br><span class="line">第1次:</span><br><span class="line">12915735</span><br><span class="line">第2次:</span><br><span class="line">12971535</span><br><span class="line">第3次:</span><br><span class="line">12975135</span><br><span class="line">第4次:</span><br><span class="line">12975513</span><br><span class="line">第5次:</span><br><span class="line">12975531</span><br><span class="line">第6次:</span><br><span class="line">12975531</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>冒泡排序的时间复杂度为O(n^2) ; 空间复杂度为O(1);是一个稳定算法。</p><blockquote><p>稳定的意义是指，两个相同的数据，它们排序完之后相对位置不变，比如上面数组的5[a],5[b],排序完之后不会出现5[b],5[a]; a,b为他们的相对位置。</p></blockquote><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序的意思就是有一个数组，你可以假定左边的部分是有序的，这个时候你从右边无序的数据中，找出一个，然后将其插入到有序数据的数组中。<br>有点类似打扑克，如果一次性将牌发完，你总得给牌排个序吧，比如从左到右，左边第一张你可以假设这一张是有序的，从第二张开始，你就比较一下第二张和第一张谁大，小的就往前面移动，大的就往后面移动。如果是第三张，依次与第二张比，比完再与第一张比。所以第n张就是与n-1比，再与n-2,n-3，…比较，一直比到有一张比它小的，那么这个时候，就位置就对了。看起来就像是我们将第n张牌，插入到了之前有序的一个数组中。</p><p>算法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] b = insertSort(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : b) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次,&quot;</span> + <span class="string">&quot;arr[i]为:&quot;</span> + arr[i] + <span class="string">&quot; :&quot;</span>);</span><br><span class="line">        printArr(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                arr[j - <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第1次,arr[i]为:7 :</span><br><span class="line">17591235</span><br><span class="line">17591235</span><br><span class="line">第2次,arr[i]为:5 :</span><br><span class="line">17591235</span><br><span class="line">15791235</span><br><span class="line">第3次,arr[i]为:9 :</span><br><span class="line">15791235</span><br><span class="line">15791235</span><br><span class="line">第4次,arr[i]为:12 :</span><br><span class="line">15791235</span><br><span class="line">15791235</span><br><span class="line">第5次,arr[i]为:3 :</span><br><span class="line">15791235</span><br><span class="line">13579125</span><br><span class="line">第6次,arr[i]为:5 :</span><br><span class="line">13579125</span><br><span class="line">13557912</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>插入牌的时间复杂度为：O(n^2), 空间复杂度为O(1), 是一个稳定排序算法。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序其实就是你拿了一手牌，每次你扫描一遍，拿到最小的那张，把它跟第一张交换下位置。第一次交换第一张位置的，第二次交换第二张位置的，之后依次交换到最后一张。这个咋一看挺像冒泡的，但是远离不相同，冒泡是每次都会有顺移的操作，比如<code>2,3,4,5,1</code>；如果你选了1，它要跟5做比较，交换：<code>2,3,4,1,5</code>；跟4做比较，交换<code>2,3,1,4,5</code>。而选择排序则是：<code>2,3,4,5,1</code>；你先选最小的1，然后跟第一个位置的2做交换变成了<code>1,3,4,5,2</code>,有没有发现，其实只做了一次交换。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] b = selectSort(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : b) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;<span class="comment">//初始化j的位置</span></span><br><span class="line">        <span class="keyword">int</span> k = j;<span class="comment">//数组中值最小的数的位置</span></span><br><span class="line">        <span class="keyword">int</span> tmp = arr[i];<span class="comment">//用来存储每次遍历的最小值</span></span><br><span class="line">        <span class="keyword">for</span> (; j &lt; arr.length; j++) &#123;<span class="comment">//遍历数组从i开始，0-i之间的数据可以当做是已经选择了最小的有序数组</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; tmp) &#123;</span><br><span class="line">                tmp = arr[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[k] = arr[i];<span class="comment">//交换当前i的位置和最小值的位置k两个数据</span></span><br><span class="line">        arr[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择排序算法的时间复杂度为：O(n^2);空间复杂度为：O(1); 稳定性为：不稳定。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基础排序算法&quot;&gt;&lt;a href=&quot;#基础排序算法&quot; class=&quot;headerlink&quot; title=&quot;基础排序算法&quot;&gt;&lt;/a&gt;基础排序算法&lt;/h1&gt;&lt;p&gt;每次一看算法就是，嗯，看懂了，每次自己写代码就是，嗯？这怎么写？？ 本文将自己理解的冒泡排序，插入排序，选择排序三种做一个总结。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://chenzhijun.me/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序算法" scheme="http://chenzhijun.me/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
